
Final_Project_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  000030d0  00003164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800138  00800138  0000323c  2**0
                  ALLOC
  3 .stab         00003048  00000000  00000000  0000323c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000133f  00000000  00000000  00006284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000075c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007703  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007873  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000094bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a3a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b154  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b541  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ff 11 	call	0x23fe	; 0x23fe <main>
      8a:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e2       	ldi	r26, 0x23	; 35
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e2       	ldi	r24, 0x23	; 35
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 16 18 	jmp	0x302c	; 0x302c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KEYPAD_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	62 e0       	ldi	r22, 0x02	; 2
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	63 e0       	ldi	r22, 0x03	; 3
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	64 e0       	ldi	r22, 0x04	; 4
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	65 e0       	ldi	r22, 0x05	; 5
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	66 e0       	ldi	r22, 0x06	; 6
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	67 e0       	ldi	r22, 0x07	; 7
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     ba0:	19 82       	std	Y+1, r1	; 0x01
     ba2:	35 c0       	rjmp	.+106    	; 0xc0e <KEYPAD_getPressedKey+0xc8>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	69 81       	ldd	r22, Y+1	; 0x01
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	69 81       	ldd	r22, Y+1	; 0x01
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     bb8:	1a 82       	std	Y+2, r1	; 0x02
     bba:	1e c0       	rjmp	.+60     	; 0xbf8 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	98 2f       	mov	r25, r24
     bc0:	9c 5f       	subi	r25, 0xFC	; 252
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	69 2f       	mov	r22, r25
     bc6:	0e 94 97 10 	call	0x212e	; 0x212e <GPIO_readPin>
     bca:	88 23       	and	r24, r24
     bcc:	91 f4       	brne	.+36     	; 0xbf2 <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	88 2f       	mov	r24, r24
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	98 2f       	mov	r25, r24
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	89 0f       	add	r24, r25
     be2:	8f 5f       	subi	r24, 0xFF	; 255
     be4:	0e 94 0b 06 	call	0xc16	; 0xc16 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	8f 5f       	subi	r24, 0xFF	; 255
     bf6:	8a 83       	std	Y+2, r24	; 0x02
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	f8 f2       	brcs	.-66     	; 0xbbc <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	69 81       	ldd	r22, Y+1	; 0x01
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	8f 5f       	subi	r24, 0xFF	; 255
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	84 30       	cpi	r24, 0x04	; 4
     c12:	40 f2       	brcs	.-112    	; 0xba4 <KEYPAD_getPressedKey+0x5e>
     c14:	c5 cf       	rjmp	.-118    	; 0xba0 <KEYPAD_getPressedKey+0x5a>

00000c16 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <KEYPAD_4x4_adjustKeyNumber+0x6>
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <KEYPAD_4x4_adjustKeyNumber+0x8>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
     c24:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
     c26:	8a 81       	ldd	r24, Y+2	; 0x02
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	3c 83       	std	Y+4, r19	; 0x04
     c2e:	2b 83       	std	Y+3, r18	; 0x03
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	88 30       	cpi	r24, 0x08	; 8
     c36:	91 05       	cpc	r25, r1
     c38:	09 f4       	brne	.+2      	; 0xc3c <KEYPAD_4x4_adjustKeyNumber+0x26>
     c3a:	70 c0       	rjmp	.+224    	; 0xd1c <KEYPAD_4x4_adjustKeyNumber+0x106>
     c3c:	2b 81       	ldd	r18, Y+3	; 0x03
     c3e:	3c 81       	ldd	r19, Y+4	; 0x04
     c40:	29 30       	cpi	r18, 0x09	; 9
     c42:	31 05       	cpc	r19, r1
     c44:	5c f5       	brge	.+86     	; 0xc9c <KEYPAD_4x4_adjustKeyNumber+0x86>
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	84 30       	cpi	r24, 0x04	; 4
     c4c:	91 05       	cpc	r25, r1
     c4e:	09 f4       	brne	.+2      	; 0xc52 <KEYPAD_4x4_adjustKeyNumber+0x3c>
     c50:	59 c0       	rjmp	.+178    	; 0xd04 <KEYPAD_4x4_adjustKeyNumber+0xee>
     c52:	2b 81       	ldd	r18, Y+3	; 0x03
     c54:	3c 81       	ldd	r19, Y+4	; 0x04
     c56:	25 30       	cpi	r18, 0x05	; 5
     c58:	31 05       	cpc	r19, r1
     c5a:	9c f4       	brge	.+38     	; 0xc82 <KEYPAD_4x4_adjustKeyNumber+0x6c>
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	82 30       	cpi	r24, 0x02	; 2
     c62:	91 05       	cpc	r25, r1
     c64:	09 f4       	brne	.+2      	; 0xc68 <KEYPAD_4x4_adjustKeyNumber+0x52>
     c66:	48 c0       	rjmp	.+144    	; 0xcf8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
     c68:	2b 81       	ldd	r18, Y+3	; 0x03
     c6a:	3c 81       	ldd	r19, Y+4	; 0x04
     c6c:	23 30       	cpi	r18, 0x03	; 3
     c6e:	31 05       	cpc	r19, r1
     c70:	0c f0       	brlt	.+2      	; 0xc74 <KEYPAD_4x4_adjustKeyNumber+0x5e>
     c72:	45 c0       	rjmp	.+138    	; 0xcfe <KEYPAD_4x4_adjustKeyNumber+0xe8>
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	9c 81       	ldd	r25, Y+4	; 0x04
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	91 05       	cpc	r25, r1
     c7c:	09 f4       	brne	.+2      	; 0xc80 <KEYPAD_4x4_adjustKeyNumber+0x6a>
     c7e:	39 c0       	rjmp	.+114    	; 0xcf2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
     c80:	67 c0       	rjmp	.+206    	; 0xd50 <KEYPAD_4x4_adjustKeyNumber+0x13a>
     c82:	2b 81       	ldd	r18, Y+3	; 0x03
     c84:	3c 81       	ldd	r19, Y+4	; 0x04
     c86:	26 30       	cpi	r18, 0x06	; 6
     c88:	31 05       	cpc	r19, r1
     c8a:	09 f4       	brne	.+2      	; 0xc8e <KEYPAD_4x4_adjustKeyNumber+0x78>
     c8c:	41 c0       	rjmp	.+130    	; 0xd10 <KEYPAD_4x4_adjustKeyNumber+0xfa>
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	87 30       	cpi	r24, 0x07	; 7
     c94:	91 05       	cpc	r25, r1
     c96:	0c f0       	brlt	.+2      	; 0xc9a <KEYPAD_4x4_adjustKeyNumber+0x84>
     c98:	3e c0       	rjmp	.+124    	; 0xd16 <KEYPAD_4x4_adjustKeyNumber+0x100>
     c9a:	37 c0       	rjmp	.+110    	; 0xd0a <KEYPAD_4x4_adjustKeyNumber+0xf4>
     c9c:	2b 81       	ldd	r18, Y+3	; 0x03
     c9e:	3c 81       	ldd	r19, Y+4	; 0x04
     ca0:	2c 30       	cpi	r18, 0x0C	; 12
     ca2:	31 05       	cpc	r19, r1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <KEYPAD_4x4_adjustKeyNumber+0x92>
     ca6:	46 c0       	rjmp	.+140    	; 0xd34 <KEYPAD_4x4_adjustKeyNumber+0x11e>
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	9c 81       	ldd	r25, Y+4	; 0x04
     cac:	8d 30       	cpi	r24, 0x0D	; 13
     cae:	91 05       	cpc	r25, r1
     cb0:	5c f4       	brge	.+22     	; 0xcc8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
     cb2:	2b 81       	ldd	r18, Y+3	; 0x03
     cb4:	3c 81       	ldd	r19, Y+4	; 0x04
     cb6:	2a 30       	cpi	r18, 0x0A	; 10
     cb8:	31 05       	cpc	r19, r1
     cba:	b1 f1       	breq	.+108    	; 0xd28 <KEYPAD_4x4_adjustKeyNumber+0x112>
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	8b 30       	cpi	r24, 0x0B	; 11
     cc2:	91 05       	cpc	r25, r1
     cc4:	a4 f5       	brge	.+104    	; 0xd2e <KEYPAD_4x4_adjustKeyNumber+0x118>
     cc6:	2d c0       	rjmp	.+90     	; 0xd22 <KEYPAD_4x4_adjustKeyNumber+0x10c>
     cc8:	2b 81       	ldd	r18, Y+3	; 0x03
     cca:	3c 81       	ldd	r19, Y+4	; 0x04
     ccc:	2e 30       	cpi	r18, 0x0E	; 14
     cce:	31 05       	cpc	r19, r1
     cd0:	b9 f1       	breq	.+110    	; 0xd40 <KEYPAD_4x4_adjustKeyNumber+0x12a>
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	8e 30       	cpi	r24, 0x0E	; 14
     cd8:	91 05       	cpc	r25, r1
     cda:	7c f1       	brlt	.+94     	; 0xd3a <KEYPAD_4x4_adjustKeyNumber+0x124>
     cdc:	2b 81       	ldd	r18, Y+3	; 0x03
     cde:	3c 81       	ldd	r19, Y+4	; 0x04
     ce0:	2f 30       	cpi	r18, 0x0F	; 15
     ce2:	31 05       	cpc	r19, r1
     ce4:	79 f1       	breq	.+94     	; 0xd44 <KEYPAD_4x4_adjustKeyNumber+0x12e>
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	80 31       	cpi	r24, 0x10	; 16
     cec:	91 05       	cpc	r25, r1
     cee:	69 f1       	breq	.+90     	; 0xd4a <KEYPAD_4x4_adjustKeyNumber+0x134>
     cf0:	2f c0       	rjmp	.+94     	; 0xd50 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
     cf2:	87 e0       	ldi	r24, 0x07	; 7
     cf4:	89 83       	std	Y+1, r24	; 0x01
     cf6:	2e c0       	rjmp	.+92     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
     cf8:	88 e0       	ldi	r24, 0x08	; 8
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	2b c0       	rjmp	.+86     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
     cfe:	89 e0       	ldi	r24, 0x09	; 9
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	28 c0       	rjmp	.+80     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
     d04:	85 e2       	ldi	r24, 0x25	; 37
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	25 c0       	rjmp	.+74     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
     d0a:	84 e0       	ldi	r24, 0x04	; 4
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	22 c0       	rjmp	.+68     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
     d10:	85 e0       	ldi	r24, 0x05	; 5
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	1f c0       	rjmp	.+62     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
     d16:	86 e0       	ldi	r24, 0x06	; 6
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	1c c0       	rjmp	.+56     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
     d1c:	8a e2       	ldi	r24, 0x2A	; 42
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	19 c0       	rjmp	.+50     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	16 c0       	rjmp	.+44     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	13 c0       	rjmp	.+38     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	10 c0       	rjmp	.+32     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
     d34:	8d e2       	ldi	r24, 0x2D	; 45
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	0d c0       	rjmp	.+26     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
     d3a:	8d e0       	ldi	r24, 0x0D	; 13
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	0a c0       	rjmp	.+20     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
     d40:	19 82       	std	Y+1, r1	; 0x01
     d42:	08 c0       	rjmp	.+16     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
     d44:	8d e3       	ldi	r24, 0x3D	; 61
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
     d4a:	8b e2       	ldi	r24, 0x2B	; 43
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
     d54:	89 81       	ldd	r24, Y+1	; 0x01
}
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <LCD_init>:
#include "common_macros.h"
#include "lCD.h"
#include "gpio.h"

void LCD_init(void)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	2e 97       	sbiw	r28, 0x0e	; 14
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	41 e0       	ldi	r20, 0x01	; 1
     d7e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	41 e0       	ldi	r20, 0x01	; 1
     d88:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	41 e0       	ldi	r20, 0x01	; 1
     d92:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <GPIO_setupPinDirection>
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	a0 ea       	ldi	r26, 0xA0	; 160
     d9c:	b1 e4       	ldi	r27, 0x41	; 65
     d9e:	8b 87       	std	Y+11, r24	; 0x0b
     da0:	9c 87       	std	Y+12, r25	; 0x0c
     da2:	ad 87       	std	Y+13, r26	; 0x0d
     da4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da6:	6b 85       	ldd	r22, Y+11	; 0x0b
     da8:	7c 85       	ldd	r23, Y+12	; 0x0c
     daa:	8d 85       	ldd	r24, Y+13	; 0x0d
     dac:	9e 85       	ldd	r25, Y+14	; 0x0e
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	4a ef       	ldi	r20, 0xFA	; 250
     db4:	54 e4       	ldi	r21, 0x44	; 68
     db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	8f 83       	std	Y+7, r24	; 0x07
     dc0:	98 87       	std	Y+8, r25	; 0x08
     dc2:	a9 87       	std	Y+9, r26	; 0x09
     dc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dc6:	6f 81       	ldd	r22, Y+7	; 0x07
     dc8:	78 85       	ldd	r23, Y+8	; 0x08
     dca:	89 85       	ldd	r24, Y+9	; 0x09
     dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e8       	ldi	r20, 0x80	; 128
     dd4:	5f e3       	ldi	r21, 0x3F	; 63
     dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dda:	88 23       	and	r24, r24
     ddc:	2c f4       	brge	.+10     	; 0xde8 <LCD_init+0x84>
		__ticks = 1;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
     de6:	3f c0       	rjmp	.+126    	; 0xe66 <LCD_init+0x102>
	else if (__tmp > 65535)
     de8:	6f 81       	ldd	r22, Y+7	; 0x07
     dea:	78 85       	ldd	r23, Y+8	; 0x08
     dec:	89 85       	ldd	r24, Y+9	; 0x09
     dee:	9a 85       	ldd	r25, Y+10	; 0x0a
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	3f ef       	ldi	r19, 0xFF	; 255
     df4:	4f e7       	ldi	r20, 0x7F	; 127
     df6:	57 e4       	ldi	r21, 0x47	; 71
     df8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dfc:	18 16       	cp	r1, r24
     dfe:	4c f5       	brge	.+82     	; 0xe52 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e00:	6b 85       	ldd	r22, Y+11	; 0x0b
     e02:	7c 85       	ldd	r23, Y+12	; 0x0c
     e04:	8d 85       	ldd	r24, Y+13	; 0x0d
     e06:	9e 85       	ldd	r25, Y+14	; 0x0e
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e2       	ldi	r20, 0x20	; 32
     e0e:	51 e4       	ldi	r21, 0x41	; 65
     e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <LCD_init+0xe4>
     e2a:	88 ec       	ldi	r24, 0xC8	; 200
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	9c 83       	std	Y+4, r25	; 0x04
     e30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <LCD_init+0xd2>
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	9e 81       	ldd	r25, Y+6	; 0x06
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	9e 83       	std	Y+6, r25	; 0x06
     e46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e48:	8d 81       	ldd	r24, Y+5	; 0x05
     e4a:	9e 81       	ldd	r25, Y+6	; 0x06
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	69 f7       	brne	.-38     	; 0xe2a <LCD_init+0xc6>
     e50:	14 c0       	rjmp	.+40     	; 0xe7a <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <LCD_init+0x10e>
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	6f ef       	ldi	r22, 0xFF	; 255
     e7e:	0e 94 32 11 	call	0x2264	; 0x2264 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
     e82:	88 e3       	ldi	r24, 0x38	; 56
     e84:	0e 94 53 07 	call	0xea6	; 0xea6 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     e88:	8c e0       	ldi	r24, 0x0C	; 12
     e8a:	0e 94 53 07 	call	0xea6	; 0xea6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	0e 94 53 07 	call	0xea6	; 0xea6 <LCD_sendCommand>
}
     e94:	2e 96       	adiw	r28, 0x0e	; 14
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	e9 97       	sbiw	r28, 0x39	; 57
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <GPIO_writePin>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a0 e8       	ldi	r26, 0x80	; 128
     ecc:	bf e3       	ldi	r27, 0x3F	; 63
     ece:	8d ab       	std	Y+53, r24	; 0x35
     ed0:	9e ab       	std	Y+54, r25	; 0x36
     ed2:	af ab       	std	Y+55, r26	; 0x37
     ed4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed6:	6d a9       	ldd	r22, Y+53	; 0x35
     ed8:	7e a9       	ldd	r23, Y+54	; 0x36
     eda:	8f a9       	ldd	r24, Y+55	; 0x37
     edc:	98 ad       	ldd	r25, Y+56	; 0x38
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	4a ef       	ldi	r20, 0xFA	; 250
     ee4:	54 e4       	ldi	r21, 0x44	; 68
     ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	89 ab       	std	Y+49, r24	; 0x31
     ef0:	9a ab       	std	Y+50, r25	; 0x32
     ef2:	ab ab       	std	Y+51, r26	; 0x33
     ef4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ef6:	69 a9       	ldd	r22, Y+49	; 0x31
     ef8:	7a a9       	ldd	r23, Y+50	; 0x32
     efa:	8b a9       	ldd	r24, Y+51	; 0x33
     efc:	9c a9       	ldd	r25, Y+52	; 0x34
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e8       	ldi	r20, 0x80	; 128
     f04:	5f e3       	ldi	r21, 0x3F	; 63
     f06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f0a:	88 23       	and	r24, r24
     f0c:	2c f4       	brge	.+10     	; 0xf18 <LCD_sendCommand+0x72>
		__ticks = 1;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	98 ab       	std	Y+48, r25	; 0x30
     f14:	8f a7       	std	Y+47, r24	; 0x2f
     f16:	3f c0       	rjmp	.+126    	; 0xf96 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
     f18:	69 a9       	ldd	r22, Y+49	; 0x31
     f1a:	7a a9       	ldd	r23, Y+50	; 0x32
     f1c:	8b a9       	ldd	r24, Y+51	; 0x33
     f1e:	9c a9       	ldd	r25, Y+52	; 0x34
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	3f ef       	ldi	r19, 0xFF	; 255
     f24:	4f e7       	ldi	r20, 0x7F	; 127
     f26:	57 e4       	ldi	r21, 0x47	; 71
     f28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f2c:	18 16       	cp	r1, r24
     f2e:	4c f5       	brge	.+82     	; 0xf82 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f30:	6d a9       	ldd	r22, Y+53	; 0x35
     f32:	7e a9       	ldd	r23, Y+54	; 0x36
     f34:	8f a9       	ldd	r24, Y+55	; 0x37
     f36:	98 ad       	ldd	r25, Y+56	; 0x38
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 e2       	ldi	r20, 0x20	; 32
     f3e:	51 e4       	ldi	r21, 0x41	; 65
     f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	bc 01       	movw	r22, r24
     f4a:	cd 01       	movw	r24, r26
     f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	98 ab       	std	Y+48, r25	; 0x30
     f56:	8f a7       	std	Y+47, r24	; 0x2f
     f58:	0f c0       	rjmp	.+30     	; 0xf78 <LCD_sendCommand+0xd2>
     f5a:	88 ec       	ldi	r24, 0xC8	; 200
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9e a7       	std	Y+46, r25	; 0x2e
     f60:	8d a7       	std	Y+45, r24	; 0x2d
     f62:	8d a5       	ldd	r24, Y+45	; 0x2d
     f64:	9e a5       	ldd	r25, Y+46	; 0x2e
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <LCD_sendCommand+0xc0>
     f6a:	9e a7       	std	Y+46, r25	; 0x2e
     f6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f70:	98 a9       	ldd	r25, Y+48	; 0x30
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	98 ab       	std	Y+48, r25	; 0x30
     f76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f78:	8f a5       	ldd	r24, Y+47	; 0x2f
     f7a:	98 a9       	ldd	r25, Y+48	; 0x30
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	69 f7       	brne	.-38     	; 0xf5a <LCD_sendCommand+0xb4>
     f80:	14 c0       	rjmp	.+40     	; 0xfaa <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f82:	69 a9       	ldd	r22, Y+49	; 0x31
     f84:	7a a9       	ldd	r23, Y+50	; 0x32
     f86:	8b a9       	ldd	r24, Y+51	; 0x33
     f88:	9c a9       	ldd	r25, Y+52	; 0x34
     f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	98 ab       	std	Y+48, r25	; 0x30
     f94:	8f a7       	std	Y+47, r24	; 0x2f
     f96:	8f a5       	ldd	r24, Y+47	; 0x2f
     f98:	98 a9       	ldd	r25, Y+48	; 0x30
     f9a:	9c a7       	std	Y+44, r25	; 0x2c
     f9c:	8b a7       	std	Y+43, r24	; 0x2b
     f9e:	8b a5       	ldd	r24, Y+43	; 0x2b
     fa0:	9c a5       	ldd	r25, Y+44	; 0x2c
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <LCD_sendCommand+0xfc>
     fa6:	9c a7       	std	Y+44, r25	; 0x2c
     fa8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	41 e0       	ldi	r20, 0x01	; 1
     fb0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <GPIO_writePin>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 e8       	ldi	r26, 0x80	; 128
     fba:	bf e3       	ldi	r27, 0x3F	; 63
     fbc:	8f a3       	std	Y+39, r24	; 0x27
     fbe:	98 a7       	std	Y+40, r25	; 0x28
     fc0:	a9 a7       	std	Y+41, r26	; 0x29
     fc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc4:	6f a1       	ldd	r22, Y+39	; 0x27
     fc6:	78 a5       	ldd	r23, Y+40	; 0x28
     fc8:	89 a5       	ldd	r24, Y+41	; 0x29
     fca:	9a a5       	ldd	r25, Y+42	; 0x2a
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	4a ef       	ldi	r20, 0xFA	; 250
     fd2:	54 e4       	ldi	r21, 0x44	; 68
     fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	8b a3       	std	Y+35, r24	; 0x23
     fde:	9c a3       	std	Y+36, r25	; 0x24
     fe0:	ad a3       	std	Y+37, r26	; 0x25
     fe2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fe4:	6b a1       	ldd	r22, Y+35	; 0x23
     fe6:	7c a1       	ldd	r23, Y+36	; 0x24
     fe8:	8d a1       	ldd	r24, Y+37	; 0x25
     fea:	9e a1       	ldd	r25, Y+38	; 0x26
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	5f e3       	ldi	r21, 0x3F	; 63
     ff4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <LCD_sendCommand+0x160>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9a a3       	std	Y+34, r25	; 0x22
    1002:	89 a3       	std	Y+33, r24	; 0x21
    1004:	3f c0       	rjmp	.+126    	; 0x1084 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1006:	6b a1       	ldd	r22, Y+35	; 0x23
    1008:	7c a1       	ldd	r23, Y+36	; 0x24
    100a:	8d a1       	ldd	r24, Y+37	; 0x25
    100c:	9e a1       	ldd	r25, Y+38	; 0x26
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	57 e4       	ldi	r21, 0x47	; 71
    1016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	4c f5       	brge	.+82     	; 0x1070 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101e:	6f a1       	ldd	r22, Y+39	; 0x27
    1020:	78 a5       	ldd	r23, Y+40	; 0x28
    1022:	89 a5       	ldd	r24, Y+41	; 0x29
    1024:	9a a5       	ldd	r25, Y+42	; 0x2a
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e2       	ldi	r20, 0x20	; 32
    102c:	51 e4       	ldi	r21, 0x41	; 65
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9a a3       	std	Y+34, r25	; 0x22
    1044:	89 a3       	std	Y+33, r24	; 0x21
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <LCD_sendCommand+0x1c0>
    1048:	88 ec       	ldi	r24, 0xC8	; 200
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	98 a3       	std	Y+32, r25	; 0x20
    104e:	8f 8f       	std	Y+31, r24	; 0x1f
    1050:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1052:	98 a1       	ldd	r25, Y+32	; 0x20
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <LCD_sendCommand+0x1ae>
    1058:	98 a3       	std	Y+32, r25	; 0x20
    105a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	89 a1       	ldd	r24, Y+33	; 0x21
    105e:	9a a1       	ldd	r25, Y+34	; 0x22
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	9a a3       	std	Y+34, r25	; 0x22
    1064:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1066:	89 a1       	ldd	r24, Y+33	; 0x21
    1068:	9a a1       	ldd	r25, Y+34	; 0x22
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	69 f7       	brne	.-38     	; 0x1048 <LCD_sendCommand+0x1a2>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1070:	6b a1       	ldd	r22, Y+35	; 0x23
    1072:	7c a1       	ldd	r23, Y+36	; 0x24
    1074:	8d a1       	ldd	r24, Y+37	; 0x25
    1076:	9e a1       	ldd	r25, Y+38	; 0x26
    1078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9a a3       	std	Y+34, r25	; 0x22
    1082:	89 a3       	std	Y+33, r24	; 0x21
    1084:	89 a1       	ldd	r24, Y+33	; 0x21
    1086:	9a a1       	ldd	r25, Y+34	; 0x22
    1088:	9e 8f       	std	Y+30, r25	; 0x1e
    108a:	8d 8f       	std	Y+29, r24	; 0x1d
    108c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    108e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <LCD_sendCommand+0x1ea>
    1094:	9e 8f       	std	Y+30, r25	; 0x1e
    1096:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	69 ad       	ldd	r22, Y+57	; 0x39
    109c:	0e 94 76 11 	call	0x22ec	; 0x22ec <GPIO_writePort>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a0 e8       	ldi	r26, 0x80	; 128
    10a6:	bf e3       	ldi	r27, 0x3F	; 63
    10a8:	89 8f       	std	Y+25, r24	; 0x19
    10aa:	9a 8f       	std	Y+26, r25	; 0x1a
    10ac:	ab 8f       	std	Y+27, r26	; 0x1b
    10ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b0:	69 8d       	ldd	r22, Y+25	; 0x19
    10b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	4a ef       	ldi	r20, 0xFA	; 250
    10be:	54 e4       	ldi	r21, 0x44	; 68
    10c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	8d 8b       	std	Y+21, r24	; 0x15
    10ca:	9e 8b       	std	Y+22, r25	; 0x16
    10cc:	af 8b       	std	Y+23, r26	; 0x17
    10ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10d0:	6d 89       	ldd	r22, Y+21	; 0x15
    10d2:	7e 89       	ldd	r23, Y+22	; 0x16
    10d4:	8f 89       	ldd	r24, Y+23	; 0x17
    10d6:	98 8d       	ldd	r25, Y+24	; 0x18
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e8       	ldi	r20, 0x80	; 128
    10de:	5f e3       	ldi	r21, 0x3F	; 63
    10e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e4:	88 23       	and	r24, r24
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <LCD_sendCommand+0x24c>
		__ticks = 1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9c 8b       	std	Y+20, r25	; 0x14
    10ee:	8b 8b       	std	Y+19, r24	; 0x13
    10f0:	3f c0       	rjmp	.+126    	; 0x1170 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    10f2:	6d 89       	ldd	r22, Y+21	; 0x15
    10f4:	7e 89       	ldd	r23, Y+22	; 0x16
    10f6:	8f 89       	ldd	r24, Y+23	; 0x17
    10f8:	98 8d       	ldd	r25, Y+24	; 0x18
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	3f ef       	ldi	r19, 0xFF	; 255
    10fe:	4f e7       	ldi	r20, 0x7F	; 127
    1100:	57 e4       	ldi	r21, 0x47	; 71
    1102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1106:	18 16       	cp	r1, r24
    1108:	4c f5       	brge	.+82     	; 0x115c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110a:	69 8d       	ldd	r22, Y+25	; 0x19
    110c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    110e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e2       	ldi	r20, 0x20	; 32
    1118:	51 e4       	ldi	r21, 0x41	; 65
    111a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	9c 8b       	std	Y+20, r25	; 0x14
    1130:	8b 8b       	std	Y+19, r24	; 0x13
    1132:	0f c0       	rjmp	.+30     	; 0x1152 <LCD_sendCommand+0x2ac>
    1134:	88 ec       	ldi	r24, 0xC8	; 200
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	9a 8b       	std	Y+18, r25	; 0x12
    113a:	89 8b       	std	Y+17, r24	; 0x11
    113c:	89 89       	ldd	r24, Y+17	; 0x11
    113e:	9a 89       	ldd	r25, Y+18	; 0x12
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <LCD_sendCommand+0x29a>
    1144:	9a 8b       	std	Y+18, r25	; 0x12
    1146:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1148:	8b 89       	ldd	r24, Y+19	; 0x13
    114a:	9c 89       	ldd	r25, Y+20	; 0x14
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	9c 8b       	std	Y+20, r25	; 0x14
    1150:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1152:	8b 89       	ldd	r24, Y+19	; 0x13
    1154:	9c 89       	ldd	r25, Y+20	; 0x14
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	69 f7       	brne	.-38     	; 0x1134 <LCD_sendCommand+0x28e>
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115c:	6d 89       	ldd	r22, Y+21	; 0x15
    115e:	7e 89       	ldd	r23, Y+22	; 0x16
    1160:	8f 89       	ldd	r24, Y+23	; 0x17
    1162:	98 8d       	ldd	r25, Y+24	; 0x18
    1164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	9c 8b       	std	Y+20, r25	; 0x14
    116e:	8b 8b       	std	Y+19, r24	; 0x13
    1170:	8b 89       	ldd	r24, Y+19	; 0x13
    1172:	9c 89       	ldd	r25, Y+20	; 0x14
    1174:	98 8b       	std	Y+16, r25	; 0x10
    1176:	8f 87       	std	Y+15, r24	; 0x0f
    1178:	8f 85       	ldd	r24, Y+15	; 0x0f
    117a:	98 89       	ldd	r25, Y+16	; 0x10
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <LCD_sendCommand+0x2d6>
    1180:	98 8b       	std	Y+16, r25	; 0x10
    1182:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <GPIO_writePin>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	a0 e8       	ldi	r26, 0x80	; 128
    1194:	bf e3       	ldi	r27, 0x3F	; 63
    1196:	8b 87       	std	Y+11, r24	; 0x0b
    1198:	9c 87       	std	Y+12, r25	; 0x0c
    119a:	ad 87       	std	Y+13, r26	; 0x0d
    119c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119e:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	4a ef       	ldi	r20, 0xFA	; 250
    11ac:	54 e4       	ldi	r21, 0x44	; 68
    11ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	8f 83       	std	Y+7, r24	; 0x07
    11b8:	98 87       	std	Y+8, r25	; 0x08
    11ba:	a9 87       	std	Y+9, r26	; 0x09
    11bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11be:	6f 81       	ldd	r22, Y+7	; 0x07
    11c0:	78 85       	ldd	r23, Y+8	; 0x08
    11c2:	89 85       	ldd	r24, Y+9	; 0x09
    11c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e8       	ldi	r20, 0x80	; 128
    11cc:	5f e3       	ldi	r21, 0x3F	; 63
    11ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d2:	88 23       	and	r24, r24
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <LCD_sendCommand+0x33a>
		__ticks = 1;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	9e 83       	std	Y+6, r25	; 0x06
    11dc:	8d 83       	std	Y+5, r24	; 0x05
    11de:	3f c0       	rjmp	.+126    	; 0x125e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    11e0:	6f 81       	ldd	r22, Y+7	; 0x07
    11e2:	78 85       	ldd	r23, Y+8	; 0x08
    11e4:	89 85       	ldd	r24, Y+9	; 0x09
    11e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	3f ef       	ldi	r19, 0xFF	; 255
    11ec:	4f e7       	ldi	r20, 0x7F	; 127
    11ee:	57 e4       	ldi	r21, 0x47	; 71
    11f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f4:	18 16       	cp	r1, r24
    11f6:	4c f5       	brge	.+82     	; 0x124a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e2       	ldi	r20, 0x20	; 32
    1206:	51 e4       	ldi	r21, 0x41	; 65
    1208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	9e 83       	std	Y+6, r25	; 0x06
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	0f c0       	rjmp	.+30     	; 0x1240 <LCD_sendCommand+0x39a>
    1222:	88 ec       	ldi	r24, 0xC8	; 200
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	9c 83       	std	Y+4, r25	; 0x04
    1228:	8b 83       	std	Y+3, r24	; 0x03
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <LCD_sendCommand+0x388>
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	69 f7       	brne	.-38     	; 0x1222 <LCD_sendCommand+0x37c>
    1248:	14 c0       	rjmp	.+40     	; 0x1272 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124a:	6f 81       	ldd	r22, Y+7	; 0x07
    124c:	78 85       	ldd	r23, Y+8	; 0x08
    124e:	89 85       	ldd	r24, Y+9	; 0x09
    1250:	9a 85       	ldd	r25, Y+10	; 0x0a
    1252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	9e 83       	std	Y+6, r25	; 0x06
    125c:	8d 83       	std	Y+5, r24	; 0x05
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <LCD_sendCommand+0x3c4>
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1272:	e9 96       	adiw	r28, 0x39	; 57
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	e9 97       	sbiw	r28, 0x39	; 57
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	41 e0       	ldi	r20, 0x01	; 1
    12a0:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <GPIO_writePin>
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e8       	ldi	r26, 0x80	; 128
    12aa:	bf e3       	ldi	r27, 0x3F	; 63
    12ac:	8d ab       	std	Y+53, r24	; 0x35
    12ae:	9e ab       	std	Y+54, r25	; 0x36
    12b0:	af ab       	std	Y+55, r26	; 0x37
    12b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b4:	6d a9       	ldd	r22, Y+53	; 0x35
    12b6:	7e a9       	ldd	r23, Y+54	; 0x36
    12b8:	8f a9       	ldd	r24, Y+55	; 0x37
    12ba:	98 ad       	ldd	r25, Y+56	; 0x38
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	4a ef       	ldi	r20, 0xFA	; 250
    12c2:	54 e4       	ldi	r21, 0x44	; 68
    12c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	89 ab       	std	Y+49, r24	; 0x31
    12ce:	9a ab       	std	Y+50, r25	; 0x32
    12d0:	ab ab       	std	Y+51, r26	; 0x33
    12d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12d4:	69 a9       	ldd	r22, Y+49	; 0x31
    12d6:	7a a9       	ldd	r23, Y+50	; 0x32
    12d8:	8b a9       	ldd	r24, Y+51	; 0x33
    12da:	9c a9       	ldd	r25, Y+52	; 0x34
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e8       	ldi	r20, 0x80	; 128
    12e2:	5f e3       	ldi	r21, 0x3F	; 63
    12e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e8:	88 23       	and	r24, r24
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <LCD_displayCharacter+0x72>
		__ticks = 1;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	98 ab       	std	Y+48, r25	; 0x30
    12f2:	8f a7       	std	Y+47, r24	; 0x2f
    12f4:	3f c0       	rjmp	.+126    	; 0x1374 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    12f6:	69 a9       	ldd	r22, Y+49	; 0x31
    12f8:	7a a9       	ldd	r23, Y+50	; 0x32
    12fa:	8b a9       	ldd	r24, Y+51	; 0x33
    12fc:	9c a9       	ldd	r25, Y+52	; 0x34
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	4f e7       	ldi	r20, 0x7F	; 127
    1304:	57 e4       	ldi	r21, 0x47	; 71
    1306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    130a:	18 16       	cp	r1, r24
    130c:	4c f5       	brge	.+82     	; 0x1360 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130e:	6d a9       	ldd	r22, Y+53	; 0x35
    1310:	7e a9       	ldd	r23, Y+54	; 0x36
    1312:	8f a9       	ldd	r24, Y+55	; 0x37
    1314:	98 ad       	ldd	r25, Y+56	; 0x38
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e2       	ldi	r20, 0x20	; 32
    131c:	51 e4       	ldi	r21, 0x41	; 65
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	98 ab       	std	Y+48, r25	; 0x30
    1334:	8f a7       	std	Y+47, r24	; 0x2f
    1336:	0f c0       	rjmp	.+30     	; 0x1356 <LCD_displayCharacter+0xd2>
    1338:	88 ec       	ldi	r24, 0xC8	; 200
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	9e a7       	std	Y+46, r25	; 0x2e
    133e:	8d a7       	std	Y+45, r24	; 0x2d
    1340:	8d a5       	ldd	r24, Y+45	; 0x2d
    1342:	9e a5       	ldd	r25, Y+46	; 0x2e
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <LCD_displayCharacter+0xc0>
    1348:	9e a7       	std	Y+46, r25	; 0x2e
    134a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134c:	8f a5       	ldd	r24, Y+47	; 0x2f
    134e:	98 a9       	ldd	r25, Y+48	; 0x30
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	98 ab       	std	Y+48, r25	; 0x30
    1354:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1356:	8f a5       	ldd	r24, Y+47	; 0x2f
    1358:	98 a9       	ldd	r25, Y+48	; 0x30
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	69 f7       	brne	.-38     	; 0x1338 <LCD_displayCharacter+0xb4>
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1360:	69 a9       	ldd	r22, Y+49	; 0x31
    1362:	7a a9       	ldd	r23, Y+50	; 0x32
    1364:	8b a9       	ldd	r24, Y+51	; 0x33
    1366:	9c a9       	ldd	r25, Y+52	; 0x34
    1368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	98 ab       	std	Y+48, r25	; 0x30
    1372:	8f a7       	std	Y+47, r24	; 0x2f
    1374:	8f a5       	ldd	r24, Y+47	; 0x2f
    1376:	98 a9       	ldd	r25, Y+48	; 0x30
    1378:	9c a7       	std	Y+44, r25	; 0x2c
    137a:	8b a7       	std	Y+43, r24	; 0x2b
    137c:	8b a5       	ldd	r24, Y+43	; 0x2b
    137e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <LCD_displayCharacter+0xfc>
    1384:	9c a7       	std	Y+44, r25	; 0x2c
    1386:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	61 e0       	ldi	r22, 0x01	; 1
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <GPIO_writePin>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a0 e8       	ldi	r26, 0x80	; 128
    1398:	bf e3       	ldi	r27, 0x3F	; 63
    139a:	8f a3       	std	Y+39, r24	; 0x27
    139c:	98 a7       	std	Y+40, r25	; 0x28
    139e:	a9 a7       	std	Y+41, r26	; 0x29
    13a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a2:	6f a1       	ldd	r22, Y+39	; 0x27
    13a4:	78 a5       	ldd	r23, Y+40	; 0x28
    13a6:	89 a5       	ldd	r24, Y+41	; 0x29
    13a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	4a ef       	ldi	r20, 0xFA	; 250
    13b0:	54 e4       	ldi	r21, 0x44	; 68
    13b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	8b a3       	std	Y+35, r24	; 0x23
    13bc:	9c a3       	std	Y+36, r25	; 0x24
    13be:	ad a3       	std	Y+37, r26	; 0x25
    13c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13c2:	6b a1       	ldd	r22, Y+35	; 0x23
    13c4:	7c a1       	ldd	r23, Y+36	; 0x24
    13c6:	8d a1       	ldd	r24, Y+37	; 0x25
    13c8:	9e a1       	ldd	r25, Y+38	; 0x26
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e8       	ldi	r20, 0x80	; 128
    13d0:	5f e3       	ldi	r21, 0x3F	; 63
    13d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d6:	88 23       	and	r24, r24
    13d8:	2c f4       	brge	.+10     	; 0x13e4 <LCD_displayCharacter+0x160>
		__ticks = 1;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9a a3       	std	Y+34, r25	; 0x22
    13e0:	89 a3       	std	Y+33, r24	; 0x21
    13e2:	3f c0       	rjmp	.+126    	; 0x1462 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    13e4:	6b a1       	ldd	r22, Y+35	; 0x23
    13e6:	7c a1       	ldd	r23, Y+36	; 0x24
    13e8:	8d a1       	ldd	r24, Y+37	; 0x25
    13ea:	9e a1       	ldd	r25, Y+38	; 0x26
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	4f e7       	ldi	r20, 0x7F	; 127
    13f2:	57 e4       	ldi	r21, 0x47	; 71
    13f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13f8:	18 16       	cp	r1, r24
    13fa:	4c f5       	brge	.+82     	; 0x144e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fc:	6f a1       	ldd	r22, Y+39	; 0x27
    13fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1400:	89 a5       	ldd	r24, Y+41	; 0x29
    1402:	9a a5       	ldd	r25, Y+42	; 0x2a
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e2       	ldi	r20, 0x20	; 32
    140a:	51 e4       	ldi	r21, 0x41	; 65
    140c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	bc 01       	movw	r22, r24
    1416:	cd 01       	movw	r24, r26
    1418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	9a a3       	std	Y+34, r25	; 0x22
    1422:	89 a3       	std	Y+33, r24	; 0x21
    1424:	0f c0       	rjmp	.+30     	; 0x1444 <LCD_displayCharacter+0x1c0>
    1426:	88 ec       	ldi	r24, 0xC8	; 200
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	98 a3       	std	Y+32, r25	; 0x20
    142c:	8f 8f       	std	Y+31, r24	; 0x1f
    142e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1430:	98 a1       	ldd	r25, Y+32	; 0x20
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <LCD_displayCharacter+0x1ae>
    1436:	98 a3       	std	Y+32, r25	; 0x20
    1438:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143a:	89 a1       	ldd	r24, Y+33	; 0x21
    143c:	9a a1       	ldd	r25, Y+34	; 0x22
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	9a a3       	std	Y+34, r25	; 0x22
    1442:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1444:	89 a1       	ldd	r24, Y+33	; 0x21
    1446:	9a a1       	ldd	r25, Y+34	; 0x22
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	69 f7       	brne	.-38     	; 0x1426 <LCD_displayCharacter+0x1a2>
    144c:	14 c0       	rjmp	.+40     	; 0x1476 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144e:	6b a1       	ldd	r22, Y+35	; 0x23
    1450:	7c a1       	ldd	r23, Y+36	; 0x24
    1452:	8d a1       	ldd	r24, Y+37	; 0x25
    1454:	9e a1       	ldd	r25, Y+38	; 0x26
    1456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	9a a3       	std	Y+34, r25	; 0x22
    1460:	89 a3       	std	Y+33, r24	; 0x21
    1462:	89 a1       	ldd	r24, Y+33	; 0x21
    1464:	9a a1       	ldd	r25, Y+34	; 0x22
    1466:	9e 8f       	std	Y+30, r25	; 0x1e
    1468:	8d 8f       	std	Y+29, r24	; 0x1d
    146a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    146c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <LCD_displayCharacter+0x1ea>
    1472:	9e 8f       	std	Y+30, r25	; 0x1e
    1474:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	69 ad       	ldd	r22, Y+57	; 0x39
    147a:	0e 94 76 11 	call	0x22ec	; 0x22ec <GPIO_writePort>
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e8       	ldi	r26, 0x80	; 128
    1484:	bf e3       	ldi	r27, 0x3F	; 63
    1486:	89 8f       	std	Y+25, r24	; 0x19
    1488:	9a 8f       	std	Y+26, r25	; 0x1a
    148a:	ab 8f       	std	Y+27, r26	; 0x1b
    148c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148e:	69 8d       	ldd	r22, Y+25	; 0x19
    1490:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1492:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1494:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	4a ef       	ldi	r20, 0xFA	; 250
    149c:	54 e4       	ldi	r21, 0x44	; 68
    149e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	8d 8b       	std	Y+21, r24	; 0x15
    14a8:	9e 8b       	std	Y+22, r25	; 0x16
    14aa:	af 8b       	std	Y+23, r26	; 0x17
    14ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14ae:	6d 89       	ldd	r22, Y+21	; 0x15
    14b0:	7e 89       	ldd	r23, Y+22	; 0x16
    14b2:	8f 89       	ldd	r24, Y+23	; 0x17
    14b4:	98 8d       	ldd	r25, Y+24	; 0x18
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e8       	ldi	r20, 0x80	; 128
    14bc:	5f e3       	ldi	r21, 0x3F	; 63
    14be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c2:	88 23       	and	r24, r24
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	9c 8b       	std	Y+20, r25	; 0x14
    14cc:	8b 8b       	std	Y+19, r24	; 0x13
    14ce:	3f c0       	rjmp	.+126    	; 0x154e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    14d0:	6d 89       	ldd	r22, Y+21	; 0x15
    14d2:	7e 89       	ldd	r23, Y+22	; 0x16
    14d4:	8f 89       	ldd	r24, Y+23	; 0x17
    14d6:	98 8d       	ldd	r25, Y+24	; 0x18
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	3f ef       	ldi	r19, 0xFF	; 255
    14dc:	4f e7       	ldi	r20, 0x7F	; 127
    14de:	57 e4       	ldi	r21, 0x47	; 71
    14e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e4:	18 16       	cp	r1, r24
    14e6:	4c f5       	brge	.+82     	; 0x153a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e8:	69 8d       	ldd	r22, Y+25	; 0x19
    14ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e2       	ldi	r20, 0x20	; 32
    14f6:	51 e4       	ldi	r21, 0x41	; 65
    14f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	bc 01       	movw	r22, r24
    1502:	cd 01       	movw	r24, r26
    1504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	9c 8b       	std	Y+20, r25	; 0x14
    150e:	8b 8b       	std	Y+19, r24	; 0x13
    1510:	0f c0       	rjmp	.+30     	; 0x1530 <LCD_displayCharacter+0x2ac>
    1512:	88 ec       	ldi	r24, 0xC8	; 200
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9a 8b       	std	Y+18, r25	; 0x12
    1518:	89 8b       	std	Y+17, r24	; 0x11
    151a:	89 89       	ldd	r24, Y+17	; 0x11
    151c:	9a 89       	ldd	r25, Y+18	; 0x12
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <LCD_displayCharacter+0x29a>
    1522:	9a 8b       	std	Y+18, r25	; 0x12
    1524:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1526:	8b 89       	ldd	r24, Y+19	; 0x13
    1528:	9c 89       	ldd	r25, Y+20	; 0x14
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	9c 8b       	std	Y+20, r25	; 0x14
    152e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1530:	8b 89       	ldd	r24, Y+19	; 0x13
    1532:	9c 89       	ldd	r25, Y+20	; 0x14
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	69 f7       	brne	.-38     	; 0x1512 <LCD_displayCharacter+0x28e>
    1538:	14 c0       	rjmp	.+40     	; 0x1562 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153a:	6d 89       	ldd	r22, Y+21	; 0x15
    153c:	7e 89       	ldd	r23, Y+22	; 0x16
    153e:	8f 89       	ldd	r24, Y+23	; 0x17
    1540:	98 8d       	ldd	r25, Y+24	; 0x18
    1542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	9c 8b       	std	Y+20, r25	; 0x14
    154c:	8b 8b       	std	Y+19, r24	; 0x13
    154e:	8b 89       	ldd	r24, Y+19	; 0x13
    1550:	9c 89       	ldd	r25, Y+20	; 0x14
    1552:	98 8b       	std	Y+16, r25	; 0x10
    1554:	8f 87       	std	Y+15, r24	; 0x0f
    1556:	8f 85       	ldd	r24, Y+15	; 0x0f
    1558:	98 89       	ldd	r25, Y+16	; 0x10
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <LCD_displayCharacter+0x2d6>
    155e:	98 8b       	std	Y+16, r25	; 0x10
    1560:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	61 e0       	ldi	r22, 0x01	; 1
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <GPIO_writePin>
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a0 e8       	ldi	r26, 0x80	; 128
    1572:	bf e3       	ldi	r27, 0x3F	; 63
    1574:	8b 87       	std	Y+11, r24	; 0x0b
    1576:	9c 87       	std	Y+12, r25	; 0x0c
    1578:	ad 87       	std	Y+13, r26	; 0x0d
    157a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157c:	6b 85       	ldd	r22, Y+11	; 0x0b
    157e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1580:	8d 85       	ldd	r24, Y+13	; 0x0d
    1582:	9e 85       	ldd	r25, Y+14	; 0x0e
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4a ef       	ldi	r20, 0xFA	; 250
    158a:	54 e4       	ldi	r21, 0x44	; 68
    158c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	8f 83       	std	Y+7, r24	; 0x07
    1596:	98 87       	std	Y+8, r25	; 0x08
    1598:	a9 87       	std	Y+9, r26	; 0x09
    159a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    159c:	6f 81       	ldd	r22, Y+7	; 0x07
    159e:	78 85       	ldd	r23, Y+8	; 0x08
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e8       	ldi	r20, 0x80	; 128
    15aa:	5f e3       	ldi	r21, 0x3F	; 63
    15ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b0:	88 23       	and	r24, r24
    15b2:	2c f4       	brge	.+10     	; 0x15be <LCD_displayCharacter+0x33a>
		__ticks = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
    15bc:	3f c0       	rjmp	.+126    	; 0x163c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    15be:	6f 81       	ldd	r22, Y+7	; 0x07
    15c0:	78 85       	ldd	r23, Y+8	; 0x08
    15c2:	89 85       	ldd	r24, Y+9	; 0x09
    15c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	3f ef       	ldi	r19, 0xFF	; 255
    15ca:	4f e7       	ldi	r20, 0x7F	; 127
    15cc:	57 e4       	ldi	r21, 0x47	; 71
    15ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d2:	18 16       	cp	r1, r24
    15d4:	4c f5       	brge	.+82     	; 0x1628 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15da:	8d 85       	ldd	r24, Y+13	; 0x0d
    15dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <LCD_displayCharacter+0x39a>
    1600:	88 ec       	ldi	r24, 0xC8	; 200
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9c 83       	std	Y+4, r25	; 0x04
    1606:	8b 83       	std	Y+3, r24	; 0x03
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <LCD_displayCharacter+0x388>
    1610:	9c 83       	std	Y+4, r25	; 0x04
    1612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8d 81       	ldd	r24, Y+5	; 0x05
    1620:	9e 81       	ldd	r25, Y+6	; 0x06
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	69 f7       	brne	.-38     	; 0x1600 <LCD_displayCharacter+0x37c>
    1626:	14 c0       	rjmp	.+40     	; 0x1650 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	9e 83       	std	Y+6, r25	; 0x06
    163a:	8d 83       	std	Y+5, r24	; 0x05
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	9a 81       	ldd	r25, Y+2	; 0x02
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <LCD_displayCharacter+0x3c4>
    164c:	9a 83       	std	Y+2, r25	; 0x02
    164e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1650:	e9 96       	adiw	r28, 0x39	; 57
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <LCD_displayString+0x6>
    1668:	0f 92       	push	r0
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	9b 83       	std	Y+3, r25	; 0x03
    1670:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1672:	19 82       	std	Y+1, r1	; 0x01
    1674:	0e c0       	rjmp	.+28     	; 0x1692 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	9b 81       	ldd	r25, Y+3	; 0x03
    1680:	fc 01       	movw	r30, r24
    1682:	e2 0f       	add	r30, r18
    1684:	f3 1f       	adc	r31, r19
    1686:	80 81       	ld	r24, Z
    1688:	0e 94 42 09 	call	0x1284	; 0x1284 <LCD_displayCharacter>
		i++;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	9b 81       	ldd	r25, Y+3	; 0x03
    169c:	fc 01       	movw	r30, r24
    169e:	e2 0f       	add	r30, r18
    16a0:	f3 1f       	adc	r31, r19
    16a2:	80 81       	ld	r24, Z
    16a4:	88 23       	and	r24, r24
    16a6:	39 f7       	brne	.-50     	; 0x1676 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <LCD_moveCursor+0x6>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <LCD_moveCursor+0x8>
    16bc:	0f 92       	push	r0
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	8a 83       	std	Y+2, r24	; 0x02
    16c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	3d 83       	std	Y+5, r19	; 0x05
    16ce:	2c 83       	std	Y+4, r18	; 0x04
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	91 05       	cpc	r25, r1
    16d8:	c1 f0       	breq	.+48     	; 0x170a <LCD_moveCursor+0x56>
    16da:	2c 81       	ldd	r18, Y+4	; 0x04
    16dc:	3d 81       	ldd	r19, Y+5	; 0x05
    16de:	22 30       	cpi	r18, 0x02	; 2
    16e0:	31 05       	cpc	r19, r1
    16e2:	2c f4       	brge	.+10     	; 0x16ee <LCD_moveCursor+0x3a>
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	9d 81       	ldd	r25, Y+5	; 0x05
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	61 f0       	breq	.+24     	; 0x1704 <LCD_moveCursor+0x50>
    16ec:	19 c0       	rjmp	.+50     	; 0x1720 <LCD_moveCursor+0x6c>
    16ee:	2c 81       	ldd	r18, Y+4	; 0x04
    16f0:	3d 81       	ldd	r19, Y+5	; 0x05
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	31 05       	cpc	r19, r1
    16f6:	69 f0       	breq	.+26     	; 0x1712 <LCD_moveCursor+0x5e>
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	83 30       	cpi	r24, 0x03	; 3
    16fe:	91 05       	cpc	r25, r1
    1700:	61 f0       	breq	.+24     	; 0x171a <LCD_moveCursor+0x66>
    1702:	0e c0       	rjmp	.+28     	; 0x1720 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	0b c0       	rjmp	.+22     	; 0x1720 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	80 5c       	subi	r24, 0xC0	; 192
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	07 c0       	rjmp	.+14     	; 0x1720 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	80 5f       	subi	r24, 0xF0	; 240
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	03 c0       	rjmp	.+6      	; 0x1720 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	80 5b       	subi	r24, 0xB0	; 176
    171e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	80 68       	ori	r24, 0x80	; 128
    1724:	0e 94 53 07 	call	0xea6	; 0xea6 <LCD_sendCommand>
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <LCD_displayStringRowColumn+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <LCD_displayStringRowColumn+0x8>
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	6a 83       	std	Y+2, r22	; 0x02
    1748:	5c 83       	std	Y+4, r21	; 0x04
    174a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	6a 81       	ldd	r22, Y+2	; 0x02
    1750:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_displayString>
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	62 97       	sbiw	r28, 0x12	; 18
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	9a 8b       	std	Y+18, r25	; 0x12
    1780:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1782:	89 89       	ldd	r24, Y+17	; 0x11
    1784:	9a 89       	ldd	r25, Y+18	; 0x12
    1786:	9e 01       	movw	r18, r28
    1788:	2f 5f       	subi	r18, 0xFF	; 255
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
    178c:	b9 01       	movw	r22, r18
    178e:	4a e0       	ldi	r20, 0x0A	; 10
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	0e 94 21 18 	call	0x3042	; 0x3042 <itoa>
   LCD_displayString(buff); /* Display the string */
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_displayString>
}
    179e:	62 96       	adiw	r28, 0x12	; 18
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	0e 94 53 07 	call	0xea6	; 0xea6 <LCD_sendCommand>
}
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <Timer1_init>:

/*
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <Timer1_init+0x6>
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);//Force Output Compare for Channel A and B
    17d2:	ef e4       	ldi	r30, 0x4F	; 79
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	8c e0       	ldi	r24, 0x0C	; 12
    17d8:	80 83       	st	Z, r24
	TCCR1B = (Config_Ptr->mode << WGM12);
    17da:	ae e4       	ldi	r26, 0x4E	; 78
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e9 81       	ldd	r30, Y+1	; 0x01
    17e0:	fa 81       	ldd	r31, Y+2	; 0x02
    17e2:	85 81       	ldd	r24, Z+5	; 0x05
    17e4:	88 0f       	add	r24, r24
    17e6:	88 0f       	add	r24, r24
    17e8:	88 0f       	add	r24, r24
    17ea:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    17ec:	ae e4       	ldi	r26, 0x4E	; 78
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	ee e4       	ldi	r30, 0x4E	; 78
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	98 2f       	mov	r25, r24
    17f8:	98 7f       	andi	r25, 0xF8	; 248
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	84 81       	ldd	r24, Z+4	; 0x04
    1800:	89 2b       	or	r24, r25
    1802:	8c 93       	st	X, r24

	TCNT1 = Config_Ptr->initial_value;
    1804:	ac e4       	ldi	r26, 0x4C	; 76
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e9 81       	ldd	r30, Y+1	; 0x01
    180a:	fa 81       	ldd	r31, Y+2	; 0x02
    180c:	80 81       	ld	r24, Z
    180e:	91 81       	ldd	r25, Z+1	; 0x01
    1810:	11 96       	adiw	r26, 0x01	; 1
    1812:	9c 93       	st	X, r25
    1814:	8e 93       	st	-X, r24
	if(Config_Ptr->mode == COMPARE)
    1816:	e9 81       	ldd	r30, Y+1	; 0x01
    1818:	fa 81       	ldd	r31, Y+2	; 0x02
    181a:	85 81       	ldd	r24, Z+5	; 0x05
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	51 f4       	brne	.+20     	; 0x1834 <Timer1_init+0x70>
	{
		OCR1A = Config_Ptr->compare_value; //set compare value
    1820:	ea e4       	ldi	r30, 0x4A	; 74
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	a9 81       	ldd	r26, Y+1	; 0x01
    1826:	ba 81       	ldd	r27, Y+2	; 0x02
    1828:	12 96       	adiw	r26, 0x02	; 2
    182a:	8d 91       	ld	r24, X+
    182c:	9c 91       	ld	r25, X
    182e:	13 97       	sbiw	r26, 0x03	; 3
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	80 83       	st	Z, r24
	}
	TIMSK |= (1<<OCIE1A) ;//Output Compare A Match Interrupt Enable
    1834:	a9 e5       	ldi	r26, 0x59	; 89
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e9 e5       	ldi	r30, 0x59	; 89
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	80 61       	ori	r24, 0x10	; 16
    1840:	8c 93       	st	X, r24
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <Timer1_deInit>:

/*
 * Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1854:	ef e4       	ldi	r30, 0x4F	; 79
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	10 82       	st	Z, r1
	TCCR1B = 0;
    185a:	ee e4       	ldi	r30, 0x4E	; 78
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	10 82       	st	Z, r1
	TCNT1 = 0;
    1860:	ec e4       	ldi	r30, 0x4C	; 76
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	11 82       	std	Z+1, r1	; 0x01
    1866:	10 82       	st	Z, r1
	OCR1A = 0;
    1868:	ea e4       	ldi	r30, 0x4A	; 74
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	11 82       	std	Z+1, r1	; 0x01
    186e:	10 82       	st	Z, r1
}
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <Timer1_ovf_SetCallBack>:
void Timer1_ovf_SetCallBack(void(*a_ptr)(void))
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <Timer1_ovf_SetCallBack+0x6>
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	9a 81       	ldd	r25, Y+2	; 0x02
    1888:	90 93 39 01 	sts	0x0139, r25
    188c:	80 93 38 01 	sts	0x0138, r24

}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <Timer1_comp_SetCallBack>:

void Timer1_comp_SetCallBack(void(*a_ptr)(void))
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <Timer1_comp_SetCallBack+0x6>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	90 93 3b 01 	sts	0x013B, r25
    18b0:	80 93 3a 01 	sts	0x013A, r24

}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    18e8:	80 91 38 01 	lds	r24, 0x0138
    18ec:	90 91 39 01 	lds	r25, 0x0139
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	29 f0       	breq	.+10     	; 0x18fe <__vector_7+0x40>
	{
		(*g_callBackPtr1)();
    18f4:	e0 91 38 01 	lds	r30, 0x0138
    18f8:	f0 91 39 01 	lds	r31, 0x0139
    18fc:	09 95       	icall
	}
}
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	ff 91       	pop	r31
    1904:	ef 91       	pop	r30
    1906:	bf 91       	pop	r27
    1908:	af 91       	pop	r26
    190a:	9f 91       	pop	r25
    190c:	8f 91       	pop	r24
    190e:	7f 91       	pop	r23
    1910:	6f 91       	pop	r22
    1912:	5f 91       	pop	r21
    1914:	4f 91       	pop	r20
    1916:	3f 91       	pop	r19
    1918:	2f 91       	pop	r18
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	2f 93       	push	r18
    1930:	3f 93       	push	r19
    1932:	4f 93       	push	r20
    1934:	5f 93       	push	r21
    1936:	6f 93       	push	r22
    1938:	7f 93       	push	r23
    193a:	8f 93       	push	r24
    193c:	9f 93       	push	r25
    193e:	af 93       	push	r26
    1940:	bf 93       	push	r27
    1942:	ef 93       	push	r30
    1944:	ff 93       	push	r31
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    194e:	80 91 3a 01 	lds	r24, 0x013A
    1952:	90 91 3b 01 	lds	r25, 0x013B
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	29 f0       	breq	.+10     	; 0x1964 <__vector_9+0x40>
	{
		(*g_callBackPtr2)();
    195a:	e0 91 3a 01 	lds	r30, 0x013A
    195e:	f0 91 3b 01 	lds	r31, 0x013B
    1962:	09 95       	icall
	}
}
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	ff 91       	pop	r31
    196a:	ef 91       	pop	r30
    196c:	bf 91       	pop	r27
    196e:	af 91       	pop	r26
    1970:	9f 91       	pop	r25
    1972:	8f 91       	pop	r24
    1974:	7f 91       	pop	r23
    1976:	6f 91       	pop	r22
    1978:	5f 91       	pop	r21
    197a:	4f 91       	pop	r20
    197c:	3f 91       	pop	r19
    197e:	2f 91       	pop	r18
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	0f 90       	pop	r0
    1986:	1f 90       	pop	r1
    1988:	18 95       	reti

0000198a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType * Config_Ptr)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	2c 97       	sbiw	r28, 0x0c	; 12
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	9c 83       	std	Y+4, r25	; 0x04
    19a0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    19a2:	1a 82       	std	Y+2, r1	; 0x02
    19a4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    19a6:	eb e2       	ldi	r30, 0x2B	; 43
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	80 83       	st	Z, r24

	switch(Config_Ptr ->ModeSelect)
    19ae:	eb 81       	ldd	r30, Y+3	; 0x03
    19b0:	fc 81       	ldd	r31, Y+4	; 0x04
    19b2:	80 81       	ld	r24, Z
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	3c 87       	std	Y+12, r19	; 0x0c
    19ba:	2b 87       	std	Y+11, r18	; 0x0b
    19bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    19be:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <UART_init+0x46>
    19c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    19c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    19c8:	21 30       	cpi	r18, 0x01	; 1
    19ca:	31 05       	cpc	r19, r1
    19cc:	49 f0       	breq	.+18     	; 0x19e0 <UART_init+0x56>
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <UART_init+0x64>
	{
	case Asynchronous :
		CLEAR_BIT(UCSRC,UMSEL);
    19d0:	a0 e4       	ldi	r26, 0x40	; 64
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e0 e4       	ldi	r30, 0x40	; 64
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	8f 7b       	andi	r24, 0xBF	; 191
    19dc:	8c 93       	st	X, r24
    19de:	07 c0       	rjmp	.+14     	; 0x19ee <UART_init+0x64>
		break;
	case Synchronous :
		SET_BIT(UCSRC,UMSEL);
    19e0:	a0 e4       	ldi	r26, 0x40	; 64
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e0 e4       	ldi	r30, 0x40	; 64
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	80 64       	ori	r24, 0x40	; 64
    19ec:	8c 93       	st	X, r24
		break;

	}

	switch(Config_Ptr ->ParityMode)
    19ee:	eb 81       	ldd	r30, Y+3	; 0x03
    19f0:	fc 81       	ldd	r31, Y+4	; 0x04
    19f2:	81 81       	ldd	r24, Z+1	; 0x01
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	3a 87       	std	Y+10, r19	; 0x0a
    19fa:	29 87       	std	Y+9, r18	; 0x09
    19fc:	89 85       	ldd	r24, Y+9	; 0x09
    19fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a00:	82 30       	cpi	r24, 0x02	; 2
    1a02:	91 05       	cpc	r25, r1
    1a04:	c1 f0       	breq	.+48     	; 0x1a36 <UART_init+0xac>
    1a06:	29 85       	ldd	r18, Y+9	; 0x09
    1a08:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a0a:	23 30       	cpi	r18, 0x03	; 3
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	11 f1       	breq	.+68     	; 0x1a54 <UART_init+0xca>
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	61 f5       	brne	.+88     	; 0x1a70 <UART_init+0xe6>
	{
	case Disabled :
		CLEAR_BIT(UCSRC,UPM0);
    1a18:	a0 e4       	ldi	r26, 0x40	; 64
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e0 e4       	ldi	r30, 0x40	; 64
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8f 7e       	andi	r24, 0xEF	; 239
    1a24:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    1a26:	a0 e4       	ldi	r26, 0x40	; 64
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e0 e4       	ldi	r30, 0x40	; 64
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	8f 7d       	andi	r24, 0xDF	; 223
    1a32:	8c 93       	st	X, r24
    1a34:	1d c0       	rjmp	.+58     	; 0x1a70 <UART_init+0xe6>
		break;
	case EnabledEvenParity :
		CLEAR_BIT(UCSRC,UPM0);
    1a36:	a0 e4       	ldi	r26, 0x40	; 64
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e0 e4       	ldi	r30, 0x40	; 64
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	8f 7e       	andi	r24, 0xEF	; 239
    1a42:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
    1a44:	a0 e4       	ldi	r26, 0x40	; 64
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e0 e4       	ldi	r30, 0x40	; 64
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	80 62       	ori	r24, 0x20	; 32
    1a50:	8c 93       	st	X, r24
    1a52:	0e c0       	rjmp	.+28     	; 0x1a70 <UART_init+0xe6>
		break;
	case EnabledOddParity:
		SET_BIT(UCSRC,UPM0);
    1a54:	a0 e4       	ldi	r26, 0x40	; 64
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e0 e4       	ldi	r30, 0x40	; 64
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	80 61       	ori	r24, 0x10	; 16
    1a60:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
    1a62:	a0 e4       	ldi	r26, 0x40	; 64
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e0 e4       	ldi	r30, 0x40	; 64
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	80 62       	ori	r24, 0x20	; 32
    1a6e:	8c 93       	st	X, r24
	}

	switch(Config_Ptr ->StopBit)
    1a70:	eb 81       	ldd	r30, Y+3	; 0x03
    1a72:	fc 81       	ldd	r31, Y+4	; 0x04
    1a74:	82 81       	ldd	r24, Z+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	38 87       	std	Y+8, r19	; 0x08
    1a7c:	2f 83       	std	Y+7, r18	; 0x07
    1a7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a80:	98 85       	ldd	r25, Y+8	; 0x08
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	31 f0       	breq	.+12     	; 0x1a92 <UART_init+0x108>
    1a86:	2f 81       	ldd	r18, Y+7	; 0x07
    1a88:	38 85       	ldd	r19, Y+8	; 0x08
    1a8a:	21 30       	cpi	r18, 0x01	; 1
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	49 f0       	breq	.+18     	; 0x1aa2 <UART_init+0x118>
    1a90:	0f c0       	rjmp	.+30     	; 0x1ab0 <UART_init+0x126>
	{
	case oneBit :
		CLEAR_BIT(UCSRC,USBS);
    1a92:	a0 e4       	ldi	r26, 0x40	; 64
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e0 e4       	ldi	r30, 0x40	; 64
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	87 7f       	andi	r24, 0xF7	; 247
    1a9e:	8c 93       	st	X, r24
    1aa0:	07 c0       	rjmp	.+14     	; 0x1ab0 <UART_init+0x126>
		break;
	case twoBit :
		SET_BIT(UCSRC,USBS);
    1aa2:	a0 e4       	ldi	r26, 0x40	; 64
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e0 e4       	ldi	r30, 0x40	; 64
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	88 60       	ori	r24, 0x08	; 8
    1aae:	8c 93       	st	X, r24
		break;
	}

	switch(Config_Ptr ->DataSize)
    1ab0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ab2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ab4:	83 81       	ldd	r24, Z+3	; 0x03
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	3e 83       	std	Y+6, r19	; 0x06
    1abc:	2d 83       	std	Y+5, r18	; 0x05
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <UART_init+0x140>
    1ac8:	48 c0       	rjmp	.+144    	; 0x1b5a <UART_init+0x1d0>
    1aca:	2d 81       	ldd	r18, Y+5	; 0x05
    1acc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ace:	23 30       	cpi	r18, 0x03	; 3
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	54 f4       	brge	.+20     	; 0x1ae8 <UART_init+0x15e>
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	99 f0       	breq	.+38     	; 0x1b02 <UART_init+0x178>
    1adc:	2d 81       	ldd	r18, Y+5	; 0x05
    1ade:	3e 81       	ldd	r19, Y+6	; 0x06
    1ae0:	21 30       	cpi	r18, 0x01	; 1
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	21 f1       	breq	.+72     	; 0x1b2e <UART_init+0x1a4>
    1ae6:	7a c0       	rjmp	.+244    	; 0x1bdc <UART_init+0x252>
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	83 30       	cpi	r24, 0x03	; 3
    1aee:	91 05       	cpc	r25, r1
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <UART_init+0x16a>
    1af2:	49 c0       	rjmp	.+146    	; 0x1b86 <UART_init+0x1fc>
    1af4:	2d 81       	ldd	r18, Y+5	; 0x05
    1af6:	3e 81       	ldd	r19, Y+6	; 0x06
    1af8:	27 30       	cpi	r18, 0x07	; 7
    1afa:	31 05       	cpc	r19, r1
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <UART_init+0x176>
    1afe:	59 c0       	rjmp	.+178    	; 0x1bb2 <UART_init+0x228>
    1b00:	6d c0       	rjmp	.+218    	; 0x1bdc <UART_init+0x252>
	{
	case FiveBit :
		CLEAR_BIT(UCSRC,UCSZ0);
    1b02:	a0 e4       	ldi	r26, 0x40	; 64
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e0 e4       	ldi	r30, 0x40	; 64
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	8d 7f       	andi	r24, 0xFD	; 253
    1b0e:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    1b10:	a0 e4       	ldi	r26, 0x40	; 64
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e0 e4       	ldi	r30, 0x40	; 64
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	8b 7f       	andi	r24, 0xFB	; 251
    1b1c:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    1b1e:	aa e2       	ldi	r26, 0x2A	; 42
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	ea e2       	ldi	r30, 0x2A	; 42
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	8b 7f       	andi	r24, 0xFB	; 251
    1b2a:	8c 93       	st	X, r24
    1b2c:	57 c0       	rjmp	.+174    	; 0x1bdc <UART_init+0x252>
		break;
	case SixBit :
		SET_BIT(UCSRC,UCSZ0);
    1b2e:	a0 e4       	ldi	r26, 0x40	; 64
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e0 e4       	ldi	r30, 0x40	; 64
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	82 60       	ori	r24, 0x02	; 2
    1b3a:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    1b3c:	a0 e4       	ldi	r26, 0x40	; 64
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e0 e4       	ldi	r30, 0x40	; 64
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8b 7f       	andi	r24, 0xFB	; 251
    1b48:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    1b4a:	aa e2       	ldi	r26, 0x2A	; 42
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	ea e2       	ldi	r30, 0x2A	; 42
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8b 7f       	andi	r24, 0xFB	; 251
    1b56:	8c 93       	st	X, r24
    1b58:	41 c0       	rjmp	.+130    	; 0x1bdc <UART_init+0x252>
		break;
	case SevenBit :
		CLEAR_BIT(UCSRC,UCSZ0);
    1b5a:	a0 e4       	ldi	r26, 0x40	; 64
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e0 e4       	ldi	r30, 0x40	; 64
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	8d 7f       	andi	r24, 0xFD	; 253
    1b66:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    1b68:	a0 e4       	ldi	r26, 0x40	; 64
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e0 e4       	ldi	r30, 0x40	; 64
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	84 60       	ori	r24, 0x04	; 4
    1b74:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    1b76:	aa e2       	ldi	r26, 0x2A	; 42
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	ea e2       	ldi	r30, 0x2A	; 42
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8b 7f       	andi	r24, 0xFB	; 251
    1b82:	8c 93       	st	X, r24
    1b84:	2b c0       	rjmp	.+86     	; 0x1bdc <UART_init+0x252>
		break;
	case EightBit :
		SET_BIT(UCSRC,UCSZ0);
    1b86:	a0 e4       	ldi	r26, 0x40	; 64
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e0 e4       	ldi	r30, 0x40	; 64
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	82 60       	ori	r24, 0x02	; 2
    1b92:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    1b94:	a0 e4       	ldi	r26, 0x40	; 64
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e0 e4       	ldi	r30, 0x40	; 64
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	84 60       	ori	r24, 0x04	; 4
    1ba0:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB,UCSZ2);
    1ba2:	aa e2       	ldi	r26, 0x2A	; 42
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	ea e2       	ldi	r30, 0x2A	; 42
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	8b 7f       	andi	r24, 0xFB	; 251
    1bae:	8c 93       	st	X, r24
    1bb0:	15 c0       	rjmp	.+42     	; 0x1bdc <UART_init+0x252>
		break;
	case NineBit :
		SET_BIT(UCSRC,UCSZ0);
    1bb2:	a0 e4       	ldi	r26, 0x40	; 64
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e0 e4       	ldi	r30, 0x40	; 64
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	82 60       	ori	r24, 0x02	; 2
    1bbe:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    1bc0:	a0 e4       	ldi	r26, 0x40	; 64
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e0 e4       	ldi	r30, 0x40	; 64
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	84 60       	ori	r24, 0x04	; 4
    1bcc:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    1bce:	aa e2       	ldi	r26, 0x2A	; 42
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	ea e2       	ldi	r30, 0x2A	; 42
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	84 60       	ori	r24, 0x04	; 4
    1bda:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1bdc:	ea e2       	ldi	r30, 0x2A	; 42
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	88 e1       	ldi	r24, 0x18	; 24
    1be2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL) ;
    1be4:	a0 e4       	ldi	r26, 0x40	; 64
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e0 e4       	ldi	r30, 0x40	; 64
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	80 68       	ori	r24, 0x80	; 128
    1bf0:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr ->BaudRate * 8UL))) - 1);
    1bf2:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf4:	fc 81       	ldd	r31, Y+4	; 0x04
    1bf6:	84 81       	ldd	r24, Z+4	; 0x04
    1bf8:	95 81       	ldd	r25, Z+5	; 0x05
    1bfa:	cc 01       	movw	r24, r24
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	aa 1f       	adc	r26, r26
    1c06:	bb 1f       	adc	r27, r27
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	aa 1f       	adc	r26, r26
    1c0e:	bb 1f       	adc	r27, r27
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	aa 1f       	adc	r26, r26
    1c16:	bb 1f       	adc	r27, r27
    1c18:	9c 01       	movw	r18, r24
    1c1a:	ad 01       	movw	r20, r26
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	92 e1       	ldi	r25, 0x12	; 18
    1c20:	aa e7       	ldi	r26, 0x7A	; 122
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <__udivmodsi4>
    1c2c:	da 01       	movw	r26, r20
    1c2e:	c9 01       	movw	r24, r18
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1c36:	e0 e4       	ldi	r30, 0x40	; 64
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	89 2f       	mov	r24, r25
    1c40:	99 27       	eor	r25, r25
    1c42:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1c44:	e9 e2       	ldi	r30, 0x29	; 41
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	80 83       	st	Z, r24
}
    1c4c:	2c 96       	adiw	r28, 0x0c	; 12
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	0f 92       	push	r0
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1c6a:	eb e2       	ldi	r30, 0x2B	; 43
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	80 72       	andi	r24, 0x20	; 32
    1c76:	90 70       	andi	r25, 0x00	; 0
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	b9 f3       	breq	.-18     	; 0x1c6a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1c7c:	ec e2       	ldi	r30, 0x2C	; 44
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1c94:	eb e2       	ldi	r30, 0x2B	; 43
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	88 23       	and	r24, r24
    1c9c:	dc f7       	brge	.-10     	; 0x1c94 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    1c9e:	ec e2       	ldi	r30, 0x2C	; 44
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <UART_sendString+0x6>
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	9b 83       	std	Y+3, r25	; 0x03
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1cba:	19 82       	std	Y+1, r1	; 0x01
    1cbc:	0e c0       	rjmp	.+28     	; 0x1cda <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc8:	fc 01       	movw	r30, r24
    1cca:	e2 0f       	add	r30, r18
    1ccc:	f3 1f       	adc	r31, r19
    1cce:	80 81       	ld	r24, Z
    1cd0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <UART_sendByte>
		i++;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	8f 5f       	subi	r24, 0xFF	; 255
    1cd8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	e2 0f       	add	r30, r18
    1ce8:	f3 1f       	adc	r31, r19
    1cea:	80 81       	ld	r24, Z
    1cec:	88 23       	and	r24, r24
    1cee:	39 f7       	brne	.-50     	; 0x1cbe <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <UART_receiveString+0xa>
    1d06:	0f 92       	push	r0
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	9b 83       	std	Y+3, r25	; 0x03
    1d0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d10:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1c:	8c 01       	movw	r16, r24
    1d1e:	02 0f       	add	r16, r18
    1d20:	13 1f       	adc	r17, r19
    1d22:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <UART_recieveByte>
    1d26:	f8 01       	movw	r30, r16
    1d28:	80 83       	st	Z, r24
    1d2a:	0f c0       	rjmp	.+30     	; 0x1d4a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	8f 5f       	subi	r24, 0xFF	; 255
    1d30:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3c:	8c 01       	movw	r16, r24
    1d3e:	02 0f       	add	r16, r18
    1d40:	13 1f       	adc	r17, r19
    1d42:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <UART_recieveByte>
    1d46:	f8 01       	movw	r30, r16
    1d48:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	9b 81       	ldd	r25, Y+3	; 0x03
    1d54:	fc 01       	movw	r30, r24
    1d56:	e2 0f       	add	r30, r18
    1d58:	f3 1f       	adc	r31, r19
    1d5a:	80 81       	ld	r24, Z
    1d5c:	83 32       	cpi	r24, 0x23	; 35
    1d5e:	31 f7       	brne	.-52     	; 0x1d2c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	e2 0f       	add	r30, r18
    1d6e:	f3 1f       	adc	r31, r19
    1d70:	10 82       	st	Z, r1
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	08 95       	ret

00001d82 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <GPIO_setupPinDirection+0x6>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <GPIO_setupPinDirection+0x8>
    1d8a:	0f 92       	push	r0
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	6a 83       	std	Y+2, r22	; 0x02
    1d94:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	88 30       	cpi	r24, 0x08	; 8
    1d9a:	08 f0       	brcs	.+2      	; 0x1d9e <GPIO_setupPinDirection+0x1c>
    1d9c:	d5 c0       	rjmp	.+426    	; 0x1f48 <GPIO_setupPinDirection+0x1c6>
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	84 30       	cpi	r24, 0x04	; 4
    1da2:	08 f0       	brcs	.+2      	; 0x1da6 <GPIO_setupPinDirection+0x24>
    1da4:	d1 c0       	rjmp	.+418    	; 0x1f48 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	3d 83       	std	Y+5, r19	; 0x05
    1dae:	2c 83       	std	Y+4, r18	; 0x04
    1db0:	8c 81       	ldd	r24, Y+4	; 0x04
    1db2:	9d 81       	ldd	r25, Y+5	; 0x05
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	91 05       	cpc	r25, r1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <GPIO_setupPinDirection+0x3a>
    1dba:	43 c0       	rjmp	.+134    	; 0x1e42 <GPIO_setupPinDirection+0xc0>
    1dbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc0:	22 30       	cpi	r18, 0x02	; 2
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	2c f4       	brge	.+10     	; 0x1dd0 <GPIO_setupPinDirection+0x4e>
    1dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	71 f0       	breq	.+28     	; 0x1dea <GPIO_setupPinDirection+0x68>
    1dce:	bc c0       	rjmp	.+376    	; 0x1f48 <GPIO_setupPinDirection+0x1c6>
    1dd0:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1dd4:	22 30       	cpi	r18, 0x02	; 2
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <GPIO_setupPinDirection+0x5a>
    1dda:	5f c0       	rjmp	.+190    	; 0x1e9a <GPIO_setupPinDirection+0x118>
    1ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dde:	9d 81       	ldd	r25, Y+5	; 0x05
    1de0:	83 30       	cpi	r24, 0x03	; 3
    1de2:	91 05       	cpc	r25, r1
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <GPIO_setupPinDirection+0x66>
    1de6:	85 c0       	rjmp	.+266    	; 0x1ef2 <GPIO_setupPinDirection+0x170>
    1de8:	af c0       	rjmp	.+350    	; 0x1f48 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	a1 f4       	brne	.+40     	; 0x1e18 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1df0:	aa e3       	ldi	r26, 0x3A	; 58
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	ea e3       	ldi	r30, 0x3A	; 58
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <GPIO_setupPinDirection+0x8c>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <GPIO_setupPinDirection+0x88>
    1e12:	84 2b       	or	r24, r20
    1e14:	8c 93       	st	X, r24
    1e16:	98 c0       	rjmp	.+304    	; 0x1f48 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1e18:	aa e3       	ldi	r26, 0x3A	; 58
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	ea e3       	ldi	r30, 0x3A	; 58
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	48 2f       	mov	r20, r24
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 2e       	mov	r0, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <GPIO_setupPinDirection+0xb4>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <GPIO_setupPinDirection+0xb0>
    1e3a:	80 95       	com	r24
    1e3c:	84 23       	and	r24, r20
    1e3e:	8c 93       	st	X, r24
    1e40:	83 c0       	rjmp	.+262    	; 0x1f48 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	a1 f4       	brne	.+40     	; 0x1e70 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1e48:	a7 e3       	ldi	r26, 0x37	; 55
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e7 e3       	ldi	r30, 0x37	; 55
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	48 2f       	mov	r20, r24
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	02 2e       	mov	r0, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <GPIO_setupPinDirection+0xe4>
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	0a 94       	dec	r0
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <GPIO_setupPinDirection+0xe0>
    1e6a:	84 2b       	or	r24, r20
    1e6c:	8c 93       	st	X, r24
    1e6e:	6c c0       	rjmp	.+216    	; 0x1f48 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1e70:	a7 e3       	ldi	r26, 0x37	; 55
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e7 e3       	ldi	r30, 0x37	; 55
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	48 2f       	mov	r20, r24
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	02 2e       	mov	r0, r18
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <GPIO_setupPinDirection+0x10c>
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	0a 94       	dec	r0
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <GPIO_setupPinDirection+0x108>
    1e92:	80 95       	com	r24
    1e94:	84 23       	and	r24, r20
    1e96:	8c 93       	st	X, r24
    1e98:	57 c0       	rjmp	.+174    	; 0x1f48 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	a1 f4       	brne	.+40     	; 0x1ec8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1ea0:	a4 e3       	ldi	r26, 0x34	; 52
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e4 e3       	ldi	r30, 0x34	; 52
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 2e       	mov	r0, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <GPIO_setupPinDirection+0x13c>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <GPIO_setupPinDirection+0x138>
    1ec2:	84 2b       	or	r24, r20
    1ec4:	8c 93       	st	X, r24
    1ec6:	40 c0       	rjmp	.+128    	; 0x1f48 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ec8:	a4 e3       	ldi	r26, 0x34	; 52
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e4 e3       	ldi	r30, 0x34	; 52
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	48 2f       	mov	r20, r24
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	02 2e       	mov	r0, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <GPIO_setupPinDirection+0x164>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	0a 94       	dec	r0
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <GPIO_setupPinDirection+0x160>
    1eea:	80 95       	com	r24
    1eec:	84 23       	and	r24, r20
    1eee:	8c 93       	st	X, r24
    1ef0:	2b c0       	rjmp	.+86     	; 0x1f48 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	a1 f4       	brne	.+40     	; 0x1f20 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1ef8:	a1 e3       	ldi	r26, 0x31	; 49
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e1 e3       	ldi	r30, 0x31	; 49
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	48 2f       	mov	r20, r24
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	02 2e       	mov	r0, r18
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <GPIO_setupPinDirection+0x194>
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	0a 94       	dec	r0
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <GPIO_setupPinDirection+0x190>
    1f1a:	84 2b       	or	r24, r20
    1f1c:	8c 93       	st	X, r24
    1f1e:	14 c0       	rjmp	.+40     	; 0x1f48 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1f20:	a1 e3       	ldi	r26, 0x31	; 49
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e1 e3       	ldi	r30, 0x31	; 49
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	48 2f       	mov	r20, r24
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	02 2e       	mov	r0, r18
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <GPIO_setupPinDirection+0x1bc>
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	0a 94       	dec	r0
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <GPIO_setupPinDirection+0x1b8>
    1f42:	80 95       	com	r24
    1f44:	84 23       	and	r24, r20
    1f46:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <GPIO_writePin+0x6>
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <GPIO_writePin+0x8>
    1f60:	0f 92       	push	r0
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	6a 83       	std	Y+2, r22	; 0x02
    1f6a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	88 30       	cpi	r24, 0x08	; 8
    1f70:	08 f0       	brcs	.+2      	; 0x1f74 <GPIO_writePin+0x1c>
    1f72:	d5 c0       	rjmp	.+426    	; 0x211e <GPIO_writePin+0x1c6>
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	84 30       	cpi	r24, 0x04	; 4
    1f78:	08 f0       	brcs	.+2      	; 0x1f7c <GPIO_writePin+0x24>
    1f7a:	d1 c0       	rjmp	.+418    	; 0x211e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	3d 83       	std	Y+5, r19	; 0x05
    1f84:	2c 83       	std	Y+4, r18	; 0x04
    1f86:	8c 81       	ldd	r24, Y+4	; 0x04
    1f88:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8a:	81 30       	cpi	r24, 0x01	; 1
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <GPIO_writePin+0x3a>
    1f90:	43 c0       	rjmp	.+134    	; 0x2018 <GPIO_writePin+0xc0>
    1f92:	2c 81       	ldd	r18, Y+4	; 0x04
    1f94:	3d 81       	ldd	r19, Y+5	; 0x05
    1f96:	22 30       	cpi	r18, 0x02	; 2
    1f98:	31 05       	cpc	r19, r1
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <GPIO_writePin+0x4e>
    1f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	71 f0       	breq	.+28     	; 0x1fc0 <GPIO_writePin+0x68>
    1fa4:	bc c0       	rjmp	.+376    	; 0x211e <GPIO_writePin+0x1c6>
    1fa6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa8:	3d 81       	ldd	r19, Y+5	; 0x05
    1faa:	22 30       	cpi	r18, 0x02	; 2
    1fac:	31 05       	cpc	r19, r1
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <GPIO_writePin+0x5a>
    1fb0:	5f c0       	rjmp	.+190    	; 0x2070 <GPIO_writePin+0x118>
    1fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb6:	83 30       	cpi	r24, 0x03	; 3
    1fb8:	91 05       	cpc	r25, r1
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <GPIO_writePin+0x66>
    1fbc:	85 c0       	rjmp	.+266    	; 0x20c8 <GPIO_writePin+0x170>
    1fbe:	af c0       	rjmp	.+350    	; 0x211e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	a1 f4       	brne	.+40     	; 0x1fee <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1fc6:	ab e3       	ldi	r26, 0x3B	; 59
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	eb e3       	ldi	r30, 0x3B	; 59
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	48 2f       	mov	r20, r24
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	02 2e       	mov	r0, r18
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <GPIO_writePin+0x8c>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	0a 94       	dec	r0
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <GPIO_writePin+0x88>
    1fe8:	84 2b       	or	r24, r20
    1fea:	8c 93       	st	X, r24
    1fec:	98 c0       	rjmp	.+304    	; 0x211e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1fee:	ab e3       	ldi	r26, 0x3B	; 59
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	eb e3       	ldi	r30, 0x3B	; 59
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	48 2f       	mov	r20, r24
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	02 2e       	mov	r0, r18
    2006:	02 c0       	rjmp	.+4      	; 0x200c <GPIO_writePin+0xb4>
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	0a 94       	dec	r0
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <GPIO_writePin+0xb0>
    2010:	80 95       	com	r24
    2012:	84 23       	and	r24, r20
    2014:	8c 93       	st	X, r24
    2016:	83 c0       	rjmp	.+262    	; 0x211e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	a1 f4       	brne	.+40     	; 0x2046 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    201e:	a8 e3       	ldi	r26, 0x38	; 56
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e8 e3       	ldi	r30, 0x38	; 56
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 2e       	mov	r0, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <GPIO_writePin+0xe4>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	0a 94       	dec	r0
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <GPIO_writePin+0xe0>
    2040:	84 2b       	or	r24, r20
    2042:	8c 93       	st	X, r24
    2044:	6c c0       	rjmp	.+216    	; 0x211e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2046:	a8 e3       	ldi	r26, 0x38	; 56
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e8 e3       	ldi	r30, 0x38	; 56
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	48 2f       	mov	r20, r24
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	02 2e       	mov	r0, r18
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <GPIO_writePin+0x10c>
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	0a 94       	dec	r0
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <GPIO_writePin+0x108>
    2068:	80 95       	com	r24
    206a:	84 23       	and	r24, r20
    206c:	8c 93       	st	X, r24
    206e:	57 c0       	rjmp	.+174    	; 0x211e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	a1 f4       	brne	.+40     	; 0x209e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2076:	a5 e3       	ldi	r26, 0x35	; 53
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e5 e3       	ldi	r30, 0x35	; 53
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	48 2f       	mov	r20, r24
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	02 2e       	mov	r0, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <GPIO_writePin+0x13c>
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	0a 94       	dec	r0
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <GPIO_writePin+0x138>
    2098:	84 2b       	or	r24, r20
    209a:	8c 93       	st	X, r24
    209c:	40 c0       	rjmp	.+128    	; 0x211e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    209e:	a5 e3       	ldi	r26, 0x35	; 53
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e5 e3       	ldi	r30, 0x35	; 53
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	48 2f       	mov	r20, r24
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	02 2e       	mov	r0, r18
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <GPIO_writePin+0x164>
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	0a 94       	dec	r0
    20be:	e2 f7       	brpl	.-8      	; 0x20b8 <GPIO_writePin+0x160>
    20c0:	80 95       	com	r24
    20c2:	84 23       	and	r24, r20
    20c4:	8c 93       	st	X, r24
    20c6:	2b c0       	rjmp	.+86     	; 0x211e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	81 30       	cpi	r24, 0x01	; 1
    20cc:	a1 f4       	brne	.+40     	; 0x20f6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    20ce:	a2 e3       	ldi	r26, 0x32	; 50
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e2 e3       	ldi	r30, 0x32	; 50
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	48 2f       	mov	r20, r24
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	02 2e       	mov	r0, r18
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <GPIO_writePin+0x194>
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	0a 94       	dec	r0
    20ee:	e2 f7       	brpl	.-8      	; 0x20e8 <GPIO_writePin+0x190>
    20f0:	84 2b       	or	r24, r20
    20f2:	8c 93       	st	X, r24
    20f4:	14 c0       	rjmp	.+40     	; 0x211e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    20f6:	a2 e3       	ldi	r26, 0x32	; 50
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e2 e3       	ldi	r30, 0x32	; 50
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	48 2f       	mov	r20, r24
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	02 2e       	mov	r0, r18
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <GPIO_writePin+0x1bc>
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	0a 94       	dec	r0
    2116:	e2 f7       	brpl	.-8      	; 0x2110 <GPIO_writePin+0x1b8>
    2118:	80 95       	com	r24
    211a:	84 23       	and	r24, r20
    211c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	00 d0       	rcall	.+0      	; 0x2134 <GPIO_readPin+0x6>
    2134:	00 d0       	rcall	.+0      	; 0x2136 <GPIO_readPin+0x8>
    2136:	0f 92       	push	r0
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	8a 83       	std	Y+2, r24	; 0x02
    213e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2140:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	88 30       	cpi	r24, 0x08	; 8
    2146:	08 f0       	brcs	.+2      	; 0x214a <GPIO_readPin+0x1c>
    2148:	84 c0       	rjmp	.+264    	; 0x2252 <GPIO_readPin+0x124>
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	84 30       	cpi	r24, 0x04	; 4
    214e:	08 f0       	brcs	.+2      	; 0x2152 <GPIO_readPin+0x24>
    2150:	80 c0       	rjmp	.+256    	; 0x2252 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	3d 83       	std	Y+5, r19	; 0x05
    215a:	2c 83       	std	Y+4, r18	; 0x04
    215c:	4c 81       	ldd	r20, Y+4	; 0x04
    215e:	5d 81       	ldd	r21, Y+5	; 0x05
    2160:	41 30       	cpi	r20, 0x01	; 1
    2162:	51 05       	cpc	r21, r1
    2164:	79 f1       	breq	.+94     	; 0x21c4 <GPIO_readPin+0x96>
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
    2168:	9d 81       	ldd	r25, Y+5	; 0x05
    216a:	82 30       	cpi	r24, 0x02	; 2
    216c:	91 05       	cpc	r25, r1
    216e:	34 f4       	brge	.+12     	; 0x217c <GPIO_readPin+0x4e>
    2170:	2c 81       	ldd	r18, Y+4	; 0x04
    2172:	3d 81       	ldd	r19, Y+5	; 0x05
    2174:	21 15       	cp	r18, r1
    2176:	31 05       	cpc	r19, r1
    2178:	69 f0       	breq	.+26     	; 0x2194 <GPIO_readPin+0x66>
    217a:	6b c0       	rjmp	.+214    	; 0x2252 <GPIO_readPin+0x124>
    217c:	4c 81       	ldd	r20, Y+4	; 0x04
    217e:	5d 81       	ldd	r21, Y+5	; 0x05
    2180:	42 30       	cpi	r20, 0x02	; 2
    2182:	51 05       	cpc	r21, r1
    2184:	b9 f1       	breq	.+110    	; 0x21f4 <GPIO_readPin+0xc6>
    2186:	8c 81       	ldd	r24, Y+4	; 0x04
    2188:	9d 81       	ldd	r25, Y+5	; 0x05
    218a:	83 30       	cpi	r24, 0x03	; 3
    218c:	91 05       	cpc	r25, r1
    218e:	09 f4       	brne	.+2      	; 0x2192 <GPIO_readPin+0x64>
    2190:	49 c0       	rjmp	.+146    	; 0x2224 <GPIO_readPin+0xf6>
    2192:	5f c0       	rjmp	.+190    	; 0x2252 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2194:	e9 e3       	ldi	r30, 0x39	; 57
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	a9 01       	movw	r20, r18
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <GPIO_readPin+0x7e>
    21a8:	55 95       	asr	r21
    21aa:	47 95       	ror	r20
    21ac:	8a 95       	dec	r24
    21ae:	e2 f7       	brpl	.-8      	; 0x21a8 <GPIO_readPin+0x7a>
    21b0:	ca 01       	movw	r24, r20
    21b2:	81 70       	andi	r24, 0x01	; 1
    21b4:	90 70       	andi	r25, 0x00	; 0
    21b6:	88 23       	and	r24, r24
    21b8:	19 f0       	breq	.+6      	; 0x21c0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	49 c0       	rjmp	.+146    	; 0x2252 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21c0:	19 82       	std	Y+1, r1	; 0x01
    21c2:	47 c0       	rjmp	.+142    	; 0x2252 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    21c4:	e6 e3       	ldi	r30, 0x36	; 54
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	88 2f       	mov	r24, r24
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a9 01       	movw	r20, r18
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <GPIO_readPin+0xae>
    21d8:	55 95       	asr	r21
    21da:	47 95       	ror	r20
    21dc:	8a 95       	dec	r24
    21de:	e2 f7       	brpl	.-8      	; 0x21d8 <GPIO_readPin+0xaa>
    21e0:	ca 01       	movw	r24, r20
    21e2:	81 70       	andi	r24, 0x01	; 1
    21e4:	90 70       	andi	r25, 0x00	; 0
    21e6:	88 23       	and	r24, r24
    21e8:	19 f0       	breq	.+6      	; 0x21f0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	31 c0       	rjmp	.+98     	; 0x2252 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21f0:	19 82       	std	Y+1, r1	; 0x01
    21f2:	2f c0       	rjmp	.+94     	; 0x2252 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    21f4:	e3 e3       	ldi	r30, 0x33	; 51
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	88 2f       	mov	r24, r24
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	a9 01       	movw	r20, r18
    2206:	02 c0       	rjmp	.+4      	; 0x220c <GPIO_readPin+0xde>
    2208:	55 95       	asr	r21
    220a:	47 95       	ror	r20
    220c:	8a 95       	dec	r24
    220e:	e2 f7       	brpl	.-8      	; 0x2208 <GPIO_readPin+0xda>
    2210:	ca 01       	movw	r24, r20
    2212:	81 70       	andi	r24, 0x01	; 1
    2214:	90 70       	andi	r25, 0x00	; 0
    2216:	88 23       	and	r24, r24
    2218:	19 f0       	breq	.+6      	; 0x2220 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	19 c0       	rjmp	.+50     	; 0x2252 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2220:	19 82       	std	Y+1, r1	; 0x01
    2222:	17 c0       	rjmp	.+46     	; 0x2252 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2224:	e0 e3       	ldi	r30, 0x30	; 48
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	a9 01       	movw	r20, r18
    2236:	02 c0       	rjmp	.+4      	; 0x223c <GPIO_readPin+0x10e>
    2238:	55 95       	asr	r21
    223a:	47 95       	ror	r20
    223c:	8a 95       	dec	r24
    223e:	e2 f7       	brpl	.-8      	; 0x2238 <GPIO_readPin+0x10a>
    2240:	ca 01       	movw	r24, r20
    2242:	81 70       	andi	r24, 0x01	; 1
    2244:	90 70       	andi	r25, 0x00	; 0
    2246:	88 23       	and	r24, r24
    2248:	19 f0       	breq	.+6      	; 0x2250 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	01 c0       	rjmp	.+2      	; 0x2252 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2250:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2252:	89 81       	ldd	r24, Y+1	; 0x01
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	00 d0       	rcall	.+0      	; 0x226a <GPIO_setupPortDirection+0x6>
    226a:	00 d0       	rcall	.+0      	; 0x226c <GPIO_setupPortDirection+0x8>
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	84 30       	cpi	r24, 0x04	; 4
    2278:	90 f5       	brcc	.+100    	; 0x22de <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	3c 83       	std	Y+4, r19	; 0x04
    2282:	2b 83       	std	Y+3, r18	; 0x03
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	91 05       	cpc	r25, r1
    228c:	d1 f0       	breq	.+52     	; 0x22c2 <GPIO_setupPortDirection+0x5e>
    228e:	2b 81       	ldd	r18, Y+3	; 0x03
    2290:	3c 81       	ldd	r19, Y+4	; 0x04
    2292:	22 30       	cpi	r18, 0x02	; 2
    2294:	31 05       	cpc	r19, r1
    2296:	2c f4       	brge	.+10     	; 0x22a2 <GPIO_setupPortDirection+0x3e>
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	61 f0       	breq	.+24     	; 0x22b8 <GPIO_setupPortDirection+0x54>
    22a0:	1e c0       	rjmp	.+60     	; 0x22de <GPIO_setupPortDirection+0x7a>
    22a2:	2b 81       	ldd	r18, Y+3	; 0x03
    22a4:	3c 81       	ldd	r19, Y+4	; 0x04
    22a6:	22 30       	cpi	r18, 0x02	; 2
    22a8:	31 05       	cpc	r19, r1
    22aa:	81 f0       	breq	.+32     	; 0x22cc <GPIO_setupPortDirection+0x68>
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	83 30       	cpi	r24, 0x03	; 3
    22b2:	91 05       	cpc	r25, r1
    22b4:	81 f0       	breq	.+32     	; 0x22d6 <GPIO_setupPortDirection+0x72>
    22b6:	13 c0       	rjmp	.+38     	; 0x22de <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    22b8:	ea e3       	ldi	r30, 0x3A	; 58
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	80 83       	st	Z, r24
    22c0:	0e c0       	rjmp	.+28     	; 0x22de <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    22c2:	e7 e3       	ldi	r30, 0x37	; 55
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	80 83       	st	Z, r24
    22ca:	09 c0       	rjmp	.+18     	; 0x22de <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    22cc:	e4 e3       	ldi	r30, 0x34	; 52
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	80 83       	st	Z, r24
    22d4:	04 c0       	rjmp	.+8      	; 0x22de <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    22d6:	e1 e3       	ldi	r30, 0x31	; 49
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	80 83       	st	Z, r24
			break;
		}
	}
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <GPIO_writePort+0x6>
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <GPIO_writePort+0x8>
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	84 30       	cpi	r24, 0x04	; 4
    2300:	90 f5       	brcc	.+100    	; 0x2366 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	3c 83       	std	Y+4, r19	; 0x04
    230a:	2b 83       	std	Y+3, r18	; 0x03
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	91 05       	cpc	r25, r1
    2314:	d1 f0       	breq	.+52     	; 0x234a <GPIO_writePort+0x5e>
    2316:	2b 81       	ldd	r18, Y+3	; 0x03
    2318:	3c 81       	ldd	r19, Y+4	; 0x04
    231a:	22 30       	cpi	r18, 0x02	; 2
    231c:	31 05       	cpc	r19, r1
    231e:	2c f4       	brge	.+10     	; 0x232a <GPIO_writePort+0x3e>
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	61 f0       	breq	.+24     	; 0x2340 <GPIO_writePort+0x54>
    2328:	1e c0       	rjmp	.+60     	; 0x2366 <GPIO_writePort+0x7a>
    232a:	2b 81       	ldd	r18, Y+3	; 0x03
    232c:	3c 81       	ldd	r19, Y+4	; 0x04
    232e:	22 30       	cpi	r18, 0x02	; 2
    2330:	31 05       	cpc	r19, r1
    2332:	81 f0       	breq	.+32     	; 0x2354 <GPIO_writePort+0x68>
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	83 30       	cpi	r24, 0x03	; 3
    233a:	91 05       	cpc	r25, r1
    233c:	81 f0       	breq	.+32     	; 0x235e <GPIO_writePort+0x72>
    233e:	13 c0       	rjmp	.+38     	; 0x2366 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2340:	eb e3       	ldi	r30, 0x3B	; 59
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	80 83       	st	Z, r24
    2348:	0e c0       	rjmp	.+28     	; 0x2366 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    234a:	e8 e3       	ldi	r30, 0x38	; 56
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	80 83       	st	Z, r24
    2352:	09 c0       	rjmp	.+18     	; 0x2366 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2354:	e5 e3       	ldi	r30, 0x35	; 53
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	80 83       	st	Z, r24
    235c:	04 c0       	rjmp	.+8      	; 0x2366 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    235e:	e2 e3       	ldi	r30, 0x32	; 50
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	80 83       	st	Z, r24
			break;
		}
	}
}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <GPIO_readPort+0x6>
    237a:	00 d0       	rcall	.+0      	; 0x237c <GPIO_readPort+0x8>
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2382:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	84 30       	cpi	r24, 0x04	; 4
    2388:	90 f5       	brcc	.+100    	; 0x23ee <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	3c 83       	std	Y+4, r19	; 0x04
    2392:	2b 83       	std	Y+3, r18	; 0x03
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	81 30       	cpi	r24, 0x01	; 1
    239a:	91 05       	cpc	r25, r1
    239c:	d1 f0       	breq	.+52     	; 0x23d2 <GPIO_readPort+0x5e>
    239e:	2b 81       	ldd	r18, Y+3	; 0x03
    23a0:	3c 81       	ldd	r19, Y+4	; 0x04
    23a2:	22 30       	cpi	r18, 0x02	; 2
    23a4:	31 05       	cpc	r19, r1
    23a6:	2c f4       	brge	.+10     	; 0x23b2 <GPIO_readPort+0x3e>
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	61 f0       	breq	.+24     	; 0x23c8 <GPIO_readPort+0x54>
    23b0:	1e c0       	rjmp	.+60     	; 0x23ee <GPIO_readPort+0x7a>
    23b2:	2b 81       	ldd	r18, Y+3	; 0x03
    23b4:	3c 81       	ldd	r19, Y+4	; 0x04
    23b6:	22 30       	cpi	r18, 0x02	; 2
    23b8:	31 05       	cpc	r19, r1
    23ba:	81 f0       	breq	.+32     	; 0x23dc <GPIO_readPort+0x68>
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	83 30       	cpi	r24, 0x03	; 3
    23c2:	91 05       	cpc	r25, r1
    23c4:	81 f0       	breq	.+32     	; 0x23e6 <GPIO_readPort+0x72>
    23c6:	13 c0       	rjmp	.+38     	; 0x23ee <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    23c8:	e9 e3       	ldi	r30, 0x39	; 57
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	0e c0       	rjmp	.+28     	; 0x23ee <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    23d2:	e6 e3       	ldi	r30, 0x36	; 54
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	09 c0       	rjmp	.+18     	; 0x23ee <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    23dc:	e3 e3       	ldi	r30, 0x33	; 51
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    23e6:	e0 e3       	ldi	r30, 0x30	; 48
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <main>:
uint8 MainOption(void);



int main(void)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <main+0x6>
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    2408:	0e 94 b2 06 	call	0xd64	; 0xd64 <LCD_init>
	UART_init(&UART);
    240c:	82 e3       	ldi	r24, 0x32	; 50
    240e:	91 e0       	ldi	r25, 0x01	; 1
    2410:	0e 94 c5 0c 	call	0x198a	; 0x198a <UART_init>
	SREG |=(1<<7);
    2414:	af e5       	ldi	r26, 0x5F	; 95
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	ef e5       	ldi	r30, 0x5F	; 95
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	80 68       	ori	r24, 0x80	; 128
    2420:	8c 93       	st	X, r24
	UART_sendByte(Micro_is_ready);
    2422:	80 e8       	ldi	r24, 0x80	; 128
    2424:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <UART_sendByte>
	uint8 PasswordState = UART_recieveByte();
    2428:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <UART_recieveByte>
    242c:	8a 83       	std	Y+2, r24	; 0x02
	if(PasswordState != PASSWORD_SET)
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	80 34       	cpi	r24, 0x40	; 64
    2432:	11 f0       	breq	.+4      	; 0x2438 <main+0x3a>
	{
		SetPassword();
    2434:	0e 94 2b 12 	call	0x2456	; 0x2456 <SetPassword>
	}
		while(1)
		{
			uint8 MainOptionKey = MainOption();
    2438:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <MainOption>
    243c:	89 83       	std	Y+1, r24	; 0x01
			if(MainOptionKey == '+')
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	8b 32       	cpi	r24, 0x2B	; 43
    2442:	19 f4       	brne	.+6      	; 0x244a <main+0x4c>
			{
				OpenDoor();
    2444:	0e 94 d5 16 	call	0x2daa	; 0x2daa <OpenDoor>
    2448:	f7 cf       	rjmp	.-18     	; 0x2438 <main+0x3a>
			}
			else if(MainOptionKey == '+')
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	8b 32       	cpi	r24, 0x2B	; 43
    244e:	a1 f7       	brne	.-24     	; 0x2438 <main+0x3a>
			{
				ChangePassword();
    2450:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <ChangePassword>
    2454:	f1 cf       	rjmp	.-30     	; 0x2438 <main+0x3a>

00002456 <SetPassword>:


}

void SetPassword(void)
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	ee 97       	sbiw	r28, 0x3e	; 62
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		LCD_clearScreen();
    246a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass:");
    246e:	80 e6       	ldi	r24, 0x60	; 96
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_displayString>
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	aa e7       	ldi	r26, 0x7A	; 122
    247c:	b4 e4       	ldi	r27, 0x44	; 68
    247e:	8d ab       	std	Y+53, r24	; 0x35
    2480:	9e ab       	std	Y+54, r25	; 0x36
    2482:	af ab       	std	Y+55, r26	; 0x37
    2484:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2486:	6d a9       	ldd	r22, Y+53	; 0x35
    2488:	7e a9       	ldd	r23, Y+54	; 0x36
    248a:	8f a9       	ldd	r24, Y+55	; 0x37
    248c:	98 ad       	ldd	r25, Y+56	; 0x38
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	4a ef       	ldi	r20, 0xFA	; 250
    2494:	54 e4       	ldi	r21, 0x44	; 68
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	89 ab       	std	Y+49, r24	; 0x31
    24a0:	9a ab       	std	Y+50, r25	; 0x32
    24a2:	ab ab       	std	Y+51, r26	; 0x33
    24a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24a6:	69 a9       	ldd	r22, Y+49	; 0x31
    24a8:	7a a9       	ldd	r23, Y+50	; 0x32
    24aa:	8b a9       	ldd	r24, Y+51	; 0x33
    24ac:	9c a9       	ldd	r25, Y+52	; 0x34
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ba:	88 23       	and	r24, r24
    24bc:	2c f4       	brge	.+10     	; 0x24c8 <SetPassword+0x72>
		__ticks = 1;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	98 ab       	std	Y+48, r25	; 0x30
    24c4:	8f a7       	std	Y+47, r24	; 0x2f
    24c6:	3f c0       	rjmp	.+126    	; 0x2546 <SetPassword+0xf0>
	else if (__tmp > 65535)
    24c8:	69 a9       	ldd	r22, Y+49	; 0x31
    24ca:	7a a9       	ldd	r23, Y+50	; 0x32
    24cc:	8b a9       	ldd	r24, Y+51	; 0x33
    24ce:	9c a9       	ldd	r25, Y+52	; 0x34
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	3f ef       	ldi	r19, 0xFF	; 255
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	57 e4       	ldi	r21, 0x47	; 71
    24d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24dc:	18 16       	cp	r1, r24
    24de:	4c f5       	brge	.+82     	; 0x2532 <SetPassword+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e0:	6d a9       	ldd	r22, Y+53	; 0x35
    24e2:	7e a9       	ldd	r23, Y+54	; 0x36
    24e4:	8f a9       	ldd	r24, Y+55	; 0x37
    24e6:	98 ad       	ldd	r25, Y+56	; 0x38
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e2       	ldi	r20, 0x20	; 32
    24ee:	51 e4       	ldi	r21, 0x41	; 65
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	98 ab       	std	Y+48, r25	; 0x30
    2506:	8f a7       	std	Y+47, r24	; 0x2f
    2508:	0f c0       	rjmp	.+30     	; 0x2528 <SetPassword+0xd2>
    250a:	88 ec       	ldi	r24, 0xC8	; 200
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9e a7       	std	Y+46, r25	; 0x2e
    2510:	8d a7       	std	Y+45, r24	; 0x2d
    2512:	8d a5       	ldd	r24, Y+45	; 0x2d
    2514:	9e a5       	ldd	r25, Y+46	; 0x2e
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <SetPassword+0xc0>
    251a:	9e a7       	std	Y+46, r25	; 0x2e
    251c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2520:	98 a9       	ldd	r25, Y+48	; 0x30
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	98 ab       	std	Y+48, r25	; 0x30
    2526:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2528:	8f a5       	ldd	r24, Y+47	; 0x2f
    252a:	98 a9       	ldd	r25, Y+48	; 0x30
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	69 f7       	brne	.-38     	; 0x250a <SetPassword+0xb4>
    2530:	14 c0       	rjmp	.+40     	; 0x255a <SetPassword+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2532:	69 a9       	ldd	r22, Y+49	; 0x31
    2534:	7a a9       	ldd	r23, Y+50	; 0x32
    2536:	8b a9       	ldd	r24, Y+51	; 0x33
    2538:	9c a9       	ldd	r25, Y+52	; 0x34
    253a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	98 ab       	std	Y+48, r25	; 0x30
    2544:	8f a7       	std	Y+47, r24	; 0x2f
    2546:	8f a5       	ldd	r24, Y+47	; 0x2f
    2548:	98 a9       	ldd	r25, Y+48	; 0x30
    254a:	9c a7       	std	Y+44, r25	; 0x2c
    254c:	8b a7       	std	Y+43, r24	; 0x2b
    254e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2550:	9c a5       	ldd	r25, Y+44	; 0x2c
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <SetPassword+0xfc>
    2556:	9c a7       	std	Y+44, r25	; 0x2c
    2558:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		LCD_clearScreen();
    255a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <LCD_clearScreen>
		UART_sendByte(0x99);
    255e:	89 e9       	ldi	r24, 0x99	; 153
    2560:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <UART_sendByte>
		LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
    2564:	20 e6       	ldi	r18, 0x60	; 96
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	a9 01       	movw	r20, r18
    256e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,0);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <LCD_moveCursor>
		passwordMatch=1;
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	80 93 3c 01 	sts	0x013C, r24


		for(uint8 i=0;i<password_size;i++)
    2580:	1e ae       	std	Y+62, r1	; 0x3e
    2582:	8e c0       	rjmp	.+284    	; 0x26a0 <SetPassword+0x24a>
		{
			uint8 key = KEYPAD_getPressedKey();
    2584:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2588:	8d af       	std	Y+61, r24	; 0x3d
			if(key >= 0 && key <=9 )
    258a:	8d ad       	ldd	r24, Y+61	; 0x3d
    258c:	8a 30       	cpi	r24, 0x0A	; 10
    258e:	98 f4       	brcc	.+38     	; 0x25b6 <SetPassword+0x160>
			{
				password[i]=key;
    2590:	8e ad       	ldd	r24, Y+62	; 0x3e
    2592:	88 2f       	mov	r24, r24
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	fc 01       	movw	r30, r24
    2598:	ef 5b       	subi	r30, 0xBF	; 191
    259a:	fe 4f       	sbci	r31, 0xFE	; 254
    259c:	8d ad       	ldd	r24, Y+61	; 0x3d
    259e:	80 83       	st	Z, r24
				//LCD_displayCharacter(password[i]);
				LCD_intgerToString(password[i]);
    25a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	fc 01       	movw	r30, r24
    25a8:	ef 5b       	subi	r30, 0xBF	; 191
    25aa:	fe 4f       	sbci	r31, 0xFE	; 254
    25ac:	80 81       	ld	r24, Z
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCD_intgerToString>
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	aa e7       	ldi	r26, 0x7A	; 122
    25bc:	b3 e4       	ldi	r27, 0x43	; 67
    25be:	8f a3       	std	Y+39, r24	; 0x27
    25c0:	98 a7       	std	Y+40, r25	; 0x28
    25c2:	a9 a7       	std	Y+41, r26	; 0x29
    25c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c6:	6f a1       	ldd	r22, Y+39	; 0x27
    25c8:	78 a5       	ldd	r23, Y+40	; 0x28
    25ca:	89 a5       	ldd	r24, Y+41	; 0x29
    25cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a ef       	ldi	r20, 0xFA	; 250
    25d4:	54 e4       	ldi	r21, 0x44	; 68
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	8b a3       	std	Y+35, r24	; 0x23
    25e0:	9c a3       	std	Y+36, r25	; 0x24
    25e2:	ad a3       	std	Y+37, r26	; 0x25
    25e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25e6:	6b a1       	ldd	r22, Y+35	; 0x23
    25e8:	7c a1       	ldd	r23, Y+36	; 0x24
    25ea:	8d a1       	ldd	r24, Y+37	; 0x25
    25ec:	9e a1       	ldd	r25, Y+38	; 0x26
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25fa:	88 23       	and	r24, r24
    25fc:	2c f4       	brge	.+10     	; 0x2608 <SetPassword+0x1b2>
		__ticks = 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9a a3       	std	Y+34, r25	; 0x22
    2604:	89 a3       	std	Y+33, r24	; 0x21
    2606:	3f c0       	rjmp	.+126    	; 0x2686 <SetPassword+0x230>
	else if (__tmp > 65535)
    2608:	6b a1       	ldd	r22, Y+35	; 0x23
    260a:	7c a1       	ldd	r23, Y+36	; 0x24
    260c:	8d a1       	ldd	r24, Y+37	; 0x25
    260e:	9e a1       	ldd	r25, Y+38	; 0x26
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	57 e4       	ldi	r21, 0x47	; 71
    2618:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    261c:	18 16       	cp	r1, r24
    261e:	4c f5       	brge	.+82     	; 0x2672 <SetPassword+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2620:	6f a1       	ldd	r22, Y+39	; 0x27
    2622:	78 a5       	ldd	r23, Y+40	; 0x28
    2624:	89 a5       	ldd	r24, Y+41	; 0x29
    2626:	9a a5       	ldd	r25, Y+42	; 0x2a
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	51 e4       	ldi	r21, 0x41	; 65
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9a a3       	std	Y+34, r25	; 0x22
    2646:	89 a3       	std	Y+33, r24	; 0x21
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <SetPassword+0x212>
    264a:	88 ec       	ldi	r24, 0xC8	; 200
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	98 a3       	std	Y+32, r25	; 0x20
    2650:	8f 8f       	std	Y+31, r24	; 0x1f
    2652:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2654:	98 a1       	ldd	r25, Y+32	; 0x20
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <SetPassword+0x200>
    265a:	98 a3       	std	Y+32, r25	; 0x20
    265c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	89 a1       	ldd	r24, Y+33	; 0x21
    2660:	9a a1       	ldd	r25, Y+34	; 0x22
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	9a a3       	std	Y+34, r25	; 0x22
    2666:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2668:	89 a1       	ldd	r24, Y+33	; 0x21
    266a:	9a a1       	ldd	r25, Y+34	; 0x22
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	69 f7       	brne	.-38     	; 0x264a <SetPassword+0x1f4>
    2670:	14 c0       	rjmp	.+40     	; 0x269a <SetPassword+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2672:	6b a1       	ldd	r22, Y+35	; 0x23
    2674:	7c a1       	ldd	r23, Y+36	; 0x24
    2676:	8d a1       	ldd	r24, Y+37	; 0x25
    2678:	9e a1       	ldd	r25, Y+38	; 0x26
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9a a3       	std	Y+34, r25	; 0x22
    2684:	89 a3       	std	Y+33, r24	; 0x21
    2686:	89 a1       	ldd	r24, Y+33	; 0x21
    2688:	9a a1       	ldd	r25, Y+34	; 0x22
    268a:	9e 8f       	std	Y+30, r25	; 0x1e
    268c:	8d 8f       	std	Y+29, r24	; 0x1d
    268e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2690:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <SetPassword+0x23c>
    2696:	9e 8f       	std	Y+30, r25	; 0x1e
    2698:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
		LCD_moveCursor(1,0);
		passwordMatch=1;


		for(uint8 i=0;i<password_size;i++)
    269a:	8e ad       	ldd	r24, Y+62	; 0x3e
    269c:	8f 5f       	subi	r24, 0xFF	; 255
    269e:	8e af       	std	Y+62, r24	; 0x3e
    26a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    26a2:	85 30       	cpi	r24, 0x05	; 5
    26a4:	08 f4       	brcc	.+2      	; 0x26a8 <SetPassword+0x252>
    26a6:	6e cf       	rjmp	.-292    	; 0x2584 <SetPassword+0x12e>
				LCD_intgerToString(password[i]);
			}

			_delay_ms(250);
		}
		while(KEYPAD_getPressedKey() != 13){} /* wait tell the user press Enter key on the keypad */
    26a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    26ac:	8d 30       	cpi	r24, 0x0D	; 13
    26ae:	e1 f7       	brne	.-8      	; 0x26a8 <SetPassword+0x252>

		LCD_clearScreen();
    26b0:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Plz Re-Enter the");
    26b4:	20 e7       	ldi	r18, 0x70	; 112
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	60 e0       	ldi	r22, 0x00	; 0
    26bc:	a9 01       	movw	r20, r18
    26be:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "Same Pass: ");
    26c2:	21 e8       	ldi	r18, 0x81	; 129
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	a9 01       	movw	r20, r18
    26cc:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,11);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	6b e0       	ldi	r22, 0x0B	; 11
    26d4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <LCD_moveCursor>

		for(uint8 i=0;i<password_size;i++)
    26d8:	1c ae       	std	Y+60, r1	; 0x3c
    26da:	8c c0       	rjmp	.+280    	; 0x27f4 <SetPassword+0x39e>
		{
			uint8 key = KEYPAD_getPressedKey();
    26dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    26e0:	8b af       	std	Y+59, r24	; 0x3b
			if(key >= 0 && key <=9 )
    26e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    26e4:	8a 30       	cpi	r24, 0x0A	; 10
    26e6:	88 f4       	brcc	.+34     	; 0x270a <SetPassword+0x2b4>
			{
				password2[i]=key;
    26e8:	8c ad       	ldd	r24, Y+60	; 0x3c
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	fc 01       	movw	r30, r24
    26f0:	ea 5b       	subi	r30, 0xBA	; 186
    26f2:	fe 4f       	sbci	r31, 0xFE	; 254
    26f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    26f6:	80 83       	st	Z, r24
				LCD_displayCharacter(password2[i]);
    26f8:	8c ad       	ldd	r24, Y+60	; 0x3c
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	fc 01       	movw	r30, r24
    2700:	ea 5b       	subi	r30, 0xBA	; 186
    2702:	fe 4f       	sbci	r31, 0xFE	; 254
    2704:	80 81       	ld	r24, Z
    2706:	0e 94 42 09 	call	0x1284	; 0x1284 <LCD_displayCharacter>
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	aa e7       	ldi	r26, 0x7A	; 122
    2710:	b3 e4       	ldi	r27, 0x43	; 67
    2712:	89 8f       	std	Y+25, r24	; 0x19
    2714:	9a 8f       	std	Y+26, r25	; 0x1a
    2716:	ab 8f       	std	Y+27, r26	; 0x1b
    2718:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271a:	69 8d       	ldd	r22, Y+25	; 0x19
    271c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    271e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2720:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	4a ef       	ldi	r20, 0xFA	; 250
    2728:	54 e4       	ldi	r21, 0x44	; 68
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	8d 8b       	std	Y+21, r24	; 0x15
    2734:	9e 8b       	std	Y+22, r25	; 0x16
    2736:	af 8b       	std	Y+23, r26	; 0x17
    2738:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    273a:	6d 89       	ldd	r22, Y+21	; 0x15
    273c:	7e 89       	ldd	r23, Y+22	; 0x16
    273e:	8f 89       	ldd	r24, Y+23	; 0x17
    2740:	98 8d       	ldd	r25, Y+24	; 0x18
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e8       	ldi	r20, 0x80	; 128
    2748:	5f e3       	ldi	r21, 0x3F	; 63
    274a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274e:	88 23       	and	r24, r24
    2750:	2c f4       	brge	.+10     	; 0x275c <SetPassword+0x306>
		__ticks = 1;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	9c 8b       	std	Y+20, r25	; 0x14
    2758:	8b 8b       	std	Y+19, r24	; 0x13
    275a:	3f c0       	rjmp	.+126    	; 0x27da <SetPassword+0x384>
	else if (__tmp > 65535)
    275c:	6d 89       	ldd	r22, Y+21	; 0x15
    275e:	7e 89       	ldd	r23, Y+22	; 0x16
    2760:	8f 89       	ldd	r24, Y+23	; 0x17
    2762:	98 8d       	ldd	r25, Y+24	; 0x18
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	3f ef       	ldi	r19, 0xFF	; 255
    2768:	4f e7       	ldi	r20, 0x7F	; 127
    276a:	57 e4       	ldi	r21, 0x47	; 71
    276c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2770:	18 16       	cp	r1, r24
    2772:	4c f5       	brge	.+82     	; 0x27c6 <SetPassword+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2774:	69 8d       	ldd	r22, Y+25	; 0x19
    2776:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2778:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e2       	ldi	r20, 0x20	; 32
    2782:	51 e4       	ldi	r21, 0x41	; 65
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	bc 01       	movw	r22, r24
    278e:	cd 01       	movw	r24, r26
    2790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	9c 8b       	std	Y+20, r25	; 0x14
    279a:	8b 8b       	std	Y+19, r24	; 0x13
    279c:	0f c0       	rjmp	.+30     	; 0x27bc <SetPassword+0x366>
    279e:	88 ec       	ldi	r24, 0xC8	; 200
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	9a 8b       	std	Y+18, r25	; 0x12
    27a4:	89 8b       	std	Y+17, r24	; 0x11
    27a6:	89 89       	ldd	r24, Y+17	; 0x11
    27a8:	9a 89       	ldd	r25, Y+18	; 0x12
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <SetPassword+0x354>
    27ae:	9a 8b       	std	Y+18, r25	; 0x12
    27b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b2:	8b 89       	ldd	r24, Y+19	; 0x13
    27b4:	9c 89       	ldd	r25, Y+20	; 0x14
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	9c 8b       	std	Y+20, r25	; 0x14
    27ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27bc:	8b 89       	ldd	r24, Y+19	; 0x13
    27be:	9c 89       	ldd	r25, Y+20	; 0x14
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	69 f7       	brne	.-38     	; 0x279e <SetPassword+0x348>
    27c4:	14 c0       	rjmp	.+40     	; 0x27ee <SetPassword+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c6:	6d 89       	ldd	r22, Y+21	; 0x15
    27c8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ca:	8f 89       	ldd	r24, Y+23	; 0x17
    27cc:	98 8d       	ldd	r25, Y+24	; 0x18
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9c 8b       	std	Y+20, r25	; 0x14
    27d8:	8b 8b       	std	Y+19, r24	; 0x13
    27da:	8b 89       	ldd	r24, Y+19	; 0x13
    27dc:	9c 89       	ldd	r25, Y+20	; 0x14
    27de:	98 8b       	std	Y+16, r25	; 0x10
    27e0:	8f 87       	std	Y+15, r24	; 0x0f
    27e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e4:	98 89       	ldd	r25, Y+16	; 0x10
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <SetPassword+0x390>
    27ea:	98 8b       	std	Y+16, r25	; 0x10
    27ec:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Plz Re-Enter the");
		LCD_displayStringRowColumn(1, 0, "Same Pass: ");
		LCD_moveCursor(1,11);

		for(uint8 i=0;i<password_size;i++)
    27ee:	8c ad       	ldd	r24, Y+60	; 0x3c
    27f0:	8f 5f       	subi	r24, 0xFF	; 255
    27f2:	8c af       	std	Y+60, r24	; 0x3c
    27f4:	8c ad       	ldd	r24, Y+60	; 0x3c
    27f6:	85 30       	cpi	r24, 0x05	; 5
    27f8:	08 f4       	brcc	.+2      	; 0x27fc <SetPassword+0x3a6>
    27fa:	70 cf       	rjmp	.-288    	; 0x26dc <SetPassword+0x286>

			}

			_delay_ms(250);
		}
		while(KEYPAD_getPressedKey() != 13){} /* wait tell the user press Enter key on the keypad */
    27fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2800:	8d 30       	cpi	r24, 0x0D	; 13
    2802:	e1 f7       	brne	.-8      	; 0x27fc <SetPassword+0x3a6>

		for(uint8 j=0;j<password_size;j++)
    2804:	1a ae       	std	Y+58, r1	; 0x3a
    2806:	19 c0       	rjmp	.+50     	; 0x283a <SetPassword+0x3e4>
		{
			if(password[j]!=password2[j])
    2808:	8a ad       	ldd	r24, Y+58	; 0x3a
    280a:	88 2f       	mov	r24, r24
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	fc 01       	movw	r30, r24
    2810:	ef 5b       	subi	r30, 0xBF	; 191
    2812:	fe 4f       	sbci	r31, 0xFE	; 254
    2814:	20 81       	ld	r18, Z
    2816:	8a ad       	ldd	r24, Y+58	; 0x3a
    2818:	88 2f       	mov	r24, r24
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	fc 01       	movw	r30, r24
    281e:	ea 5b       	subi	r30, 0xBA	; 186
    2820:	fe 4f       	sbci	r31, 0xFE	; 254
    2822:	80 81       	ld	r24, Z
    2824:	28 17       	cp	r18, r24
    2826:	19 f0       	breq	.+6      	; 0x282e <SetPassword+0x3d8>
			{
				passwordMatch=0;
    2828:	10 92 3c 01 	sts	0x013C, r1
    282c:	09 c0       	rjmp	.+18     	; 0x2840 <SetPassword+0x3ea>
				break;

			}
			else
			{
				passwordMatch=1;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	80 93 3c 01 	sts	0x013C, r24

			_delay_ms(250);
		}
		while(KEYPAD_getPressedKey() != 13){} /* wait tell the user press Enter key on the keypad */

		for(uint8 j=0;j<password_size;j++)
    2834:	8a ad       	ldd	r24, Y+58	; 0x3a
    2836:	8f 5f       	subi	r24, 0xFF	; 255
    2838:	8a af       	std	Y+58, r24	; 0x3a
    283a:	8a ad       	ldd	r24, Y+58	; 0x3a
    283c:	85 30       	cpi	r24, 0x05	; 5
    283e:	20 f3       	brcs	.-56     	; 0x2808 <SetPassword+0x3b2>
				passwordMatch=1;

			}

		}
		if(passwordMatch==1)
    2840:	80 91 3c 01 	lds	r24, 0x013C
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	09 f0       	breq	.+2      	; 0x284a <SetPassword+0x3f4>
    2848:	93 c0       	rjmp	.+294    	; 0x2970 <SetPassword+0x51a>
		{
			LCD_displayStringRowColumn(0, 4, "Matched");
    284a:	2d e8       	ldi	r18, 0x8D	; 141
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	64 e0       	ldi	r22, 0x04	; 4
    2852:	a9 01       	movw	r20, r18
    2854:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Password Updated");
    2858:	25 e9       	ldi	r18, 0x95	; 149
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	a9 01       	movw	r20, r18
    2862:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
			for(uint8 k = 0 ; k < password_size ; k++)
    2866:	19 ae       	std	Y+57, r1	; 0x39
    2868:	7e c0       	rjmp	.+252    	; 0x2966 <SetPassword+0x510>
			{
				UART_sendByte(password[k]);
    286a:	89 ad       	ldd	r24, Y+57	; 0x39
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	fc 01       	movw	r30, r24
    2872:	ef 5b       	subi	r30, 0xBF	; 191
    2874:	fe 4f       	sbci	r31, 0xFE	; 254
    2876:	80 81       	ld	r24, Z
    2878:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <UART_sendByte>
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	a8 e4       	ldi	r26, 0x48	; 72
    2882:	b2 e4       	ldi	r27, 0x42	; 66
    2884:	8b 87       	std	Y+11, r24	; 0x0b
    2886:	9c 87       	std	Y+12, r25	; 0x0c
    2888:	ad 87       	std	Y+13, r26	; 0x0d
    288a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288c:	6b 85       	ldd	r22, Y+11	; 0x0b
    288e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	4a ef       	ldi	r20, 0xFA	; 250
    289a:	54 e4       	ldi	r21, 0x44	; 68
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	8f 83       	std	Y+7, r24	; 0x07
    28a6:	98 87       	std	Y+8, r25	; 0x08
    28a8:	a9 87       	std	Y+9, r26	; 0x09
    28aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ac:	6f 81       	ldd	r22, Y+7	; 0x07
    28ae:	78 85       	ldd	r23, Y+8	; 0x08
    28b0:	89 85       	ldd	r24, Y+9	; 0x09
    28b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e8       	ldi	r20, 0x80	; 128
    28ba:	5f e3       	ldi	r21, 0x3F	; 63
    28bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	2c f4       	brge	.+10     	; 0x28ce <SetPassword+0x478>
		__ticks = 1;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	3f c0       	rjmp	.+126    	; 0x294c <SetPassword+0x4f6>
	else if (__tmp > 65535)
    28ce:	6f 81       	ldd	r22, Y+7	; 0x07
    28d0:	78 85       	ldd	r23, Y+8	; 0x08
    28d2:	89 85       	ldd	r24, Y+9	; 0x09
    28d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	3f ef       	ldi	r19, 0xFF	; 255
    28da:	4f e7       	ldi	r20, 0x7F	; 127
    28dc:	57 e4       	ldi	r21, 0x47	; 71
    28de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e2:	18 16       	cp	r1, r24
    28e4:	4c f5       	brge	.+82     	; 0x2938 <SetPassword+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e2       	ldi	r20, 0x20	; 32
    28f4:	51 e4       	ldi	r21, 0x41	; 65
    28f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	bc 01       	movw	r22, r24
    2900:	cd 01       	movw	r24, r26
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	9e 83       	std	Y+6, r25	; 0x06
    290c:	8d 83       	std	Y+5, r24	; 0x05
    290e:	0f c0       	rjmp	.+30     	; 0x292e <SetPassword+0x4d8>
    2910:	88 ec       	ldi	r24, 0xC8	; 200
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9c 83       	std	Y+4, r25	; 0x04
    2916:	8b 83       	std	Y+3, r24	; 0x03
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <SetPassword+0x4c6>
    2920:	9c 83       	std	Y+4, r25	; 0x04
    2922:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2924:	8d 81       	ldd	r24, Y+5	; 0x05
    2926:	9e 81       	ldd	r25, Y+6	; 0x06
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292e:	8d 81       	ldd	r24, Y+5	; 0x05
    2930:	9e 81       	ldd	r25, Y+6	; 0x06
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	69 f7       	brne	.-38     	; 0x2910 <SetPassword+0x4ba>
    2936:	14 c0       	rjmp	.+40     	; 0x2960 <SetPassword+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2938:	6f 81       	ldd	r22, Y+7	; 0x07
    293a:	78 85       	ldd	r23, Y+8	; 0x08
    293c:	89 85       	ldd	r24, Y+9	; 0x09
    293e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	9a 81       	ldd	r25, Y+2	; 0x02
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	f1 f7       	brne	.-4      	; 0x2958 <SetPassword+0x502>
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	89 83       	std	Y+1, r24	; 0x01
		}
		if(passwordMatch==1)
		{
			LCD_displayStringRowColumn(0, 4, "Matched");
			LCD_displayStringRowColumn(1, 0, "Password Updated");
			for(uint8 k = 0 ; k < password_size ; k++)
    2960:	89 ad       	ldd	r24, Y+57	; 0x39
    2962:	8f 5f       	subi	r24, 0xFF	; 255
    2964:	89 af       	std	Y+57, r24	; 0x39
    2966:	89 ad       	ldd	r24, Y+57	; 0x39
    2968:	85 30       	cpi	r24, 0x05	; 5
    296a:	08 f4       	brcc	.+2      	; 0x296e <SetPassword+0x518>
    296c:	7e cf       	rjmp	.-260    	; 0x286a <SetPassword+0x414>
    296e:	08 c0       	rjmp	.+16     	; 0x2980 <SetPassword+0x52a>
			}
			return ;
		}
		else
		{
			LCD_displayStringRowColumn(0, 0, "UnMatched");
    2970:	26 ea       	ldi	r18, 0xA6	; 166
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	a9 01       	movw	r20, r18
    297a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
    297e:	75 cd       	rjmp	.-1302   	; 0x246a <SetPassword+0x14>

		}
	}

}
    2980:	ee 96       	adiw	r28, 0x3e	; 62
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <ComparePassword>:

uint8 ComparePassword(void)
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	af 97       	sbiw	r28, 0x2f	; 47
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
	while(tries>0)
    29a6:	80 91 2b 01 	lds	r24, 0x012B
    29aa:	88 23       	and	r24, r24
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <ComparePassword+0x1e>
    29ae:	cd c1       	rjmp	.+922    	; 0x2d4a <ComparePassword+0x3b8>
	{
		passwordMatch=1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	80 93 3c 01 	sts	0x013C, r24
		LCD_clearScreen();
    29b6:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass:");
    29ba:	80 e6       	ldi	r24, 0x60	; 96
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "Password: ");
    29c2:	20 eb       	ldi	r18, 0xB0	; 176
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	a9 01       	movw	r20, r18
    29cc:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
		for(uint8 i=0;i<password_size;i++)
    29d0:	1d a6       	std	Y+45, r1	; 0x2d
    29d2:	8a c0       	rjmp	.+276    	; 0x2ae8 <ComparePassword+0x156>
		{
			uint8 key = KEYPAD_getPressedKey();
    29d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    29d8:	8c a7       	std	Y+44, r24	; 0x2c
			if(key >= 0 && key <=9 )
    29da:	8c a5       	ldd	r24, Y+44	; 0x2c
    29dc:	8a 30       	cpi	r24, 0x0A	; 10
    29de:	60 f4       	brcc	.+24     	; 0x29f8 <ComparePassword+0x66>
			{
				password2[i]=key;
    29e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    29e2:	88 2f       	mov	r24, r24
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	fc 01       	movw	r30, r24
    29e8:	ea 5b       	subi	r30, 0xBA	; 186
    29ea:	fe 4f       	sbci	r31, 0xFE	; 254
    29ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    29ee:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    29f0:	8a e2       	ldi	r24, 0x2A	; 42
    29f2:	0e 94 42 09 	call	0x1284	; 0x1284 <LCD_displayCharacter>
    29f6:	03 c0       	rjmp	.+6      	; 0x29fe <ComparePassword+0x6c>

			}
			else
			{
				i--;
    29f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    29fa:	81 50       	subi	r24, 0x01	; 1
    29fc:	8d a7       	std	Y+45, r24	; 0x2d
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	aa ef       	ldi	r26, 0xFA	; 250
    2a04:	b3 e4       	ldi	r27, 0x43	; 67
    2a06:	8f a3       	std	Y+39, r24	; 0x27
    2a08:	98 a7       	std	Y+40, r25	; 0x28
    2a0a:	a9 a7       	std	Y+41, r26	; 0x29
    2a0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a10:	78 a5       	ldd	r23, Y+40	; 0x28
    2a12:	89 a5       	ldd	r24, Y+41	; 0x29
    2a14:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	4a ef       	ldi	r20, 0xFA	; 250
    2a1c:	54 e4       	ldi	r21, 0x44	; 68
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	8b a3       	std	Y+35, r24	; 0x23
    2a28:	9c a3       	std	Y+36, r25	; 0x24
    2a2a:	ad a3       	std	Y+37, r26	; 0x25
    2a2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a30:	7c a1       	ldd	r23, Y+36	; 0x24
    2a32:	8d a1       	ldd	r24, Y+37	; 0x25
    2a34:	9e a1       	ldd	r25, Y+38	; 0x26
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <ComparePassword+0xbe>
		__ticks = 1;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9a a3       	std	Y+34, r25	; 0x22
    2a4c:	89 a3       	std	Y+33, r24	; 0x21
    2a4e:	3f c0       	rjmp	.+126    	; 0x2ace <ComparePassword+0x13c>
	else if (__tmp > 65535)
    2a50:	6b a1       	ldd	r22, Y+35	; 0x23
    2a52:	7c a1       	ldd	r23, Y+36	; 0x24
    2a54:	8d a1       	ldd	r24, Y+37	; 0x25
    2a56:	9e a1       	ldd	r25, Y+38	; 0x26
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	3f ef       	ldi	r19, 0xFF	; 255
    2a5c:	4f e7       	ldi	r20, 0x7F	; 127
    2a5e:	57 e4       	ldi	r21, 0x47	; 71
    2a60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a64:	18 16       	cp	r1, r24
    2a66:	4c f5       	brge	.+82     	; 0x2aba <ComparePassword+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a68:	6f a1       	ldd	r22, Y+39	; 0x27
    2a6a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a6c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9a a3       	std	Y+34, r25	; 0x22
    2a8e:	89 a3       	std	Y+33, r24	; 0x21
    2a90:	0f c0       	rjmp	.+30     	; 0x2ab0 <ComparePassword+0x11e>
    2a92:	88 ec       	ldi	r24, 0xC8	; 200
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	98 a3       	std	Y+32, r25	; 0x20
    2a98:	8f 8f       	std	Y+31, r24	; 0x1f
    2a9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a9c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <ComparePassword+0x10c>
    2aa2:	98 a3       	std	Y+32, r25	; 0x20
    2aa4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa6:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	9a a3       	std	Y+34, r25	; 0x22
    2aae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab4:	00 97       	sbiw	r24, 0x00	; 0
    2ab6:	69 f7       	brne	.-38     	; 0x2a92 <ComparePassword+0x100>
    2ab8:	14 c0       	rjmp	.+40     	; 0x2ae2 <ComparePassword+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aba:	6b a1       	ldd	r22, Y+35	; 0x23
    2abc:	7c a1       	ldd	r23, Y+36	; 0x24
    2abe:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9a a3       	std	Y+34, r25	; 0x22
    2acc:	89 a3       	std	Y+33, r24	; 0x21
    2ace:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ad6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ad8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <ComparePassword+0x148>
    2ade:	9e 8f       	std	Y+30, r25	; 0x1e
    2ae0:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		passwordMatch=1;
		LCD_clearScreen();
		LCD_displayString("Plz Enter Pass:");
		LCD_displayStringRowColumn(1, 0, "Password: ");
		for(uint8 i=0;i<password_size;i++)
    2ae2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ae4:	8f 5f       	subi	r24, 0xFF	; 255
    2ae6:	8d a7       	std	Y+45, r24	; 0x2d
    2ae8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2aea:	85 30       	cpi	r24, 0x05	; 5
    2aec:	08 f4       	brcc	.+2      	; 0x2af0 <ComparePassword+0x15e>
    2aee:	72 cf       	rjmp	.-284    	; 0x29d4 <ComparePassword+0x42>
				i--;

			}
			_delay_ms(500);
		}
		while(KEYPAD_getPressedKey() != 13){} /* wait tell the user press Enter key on the keypad */
    2af0:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2af4:	8d 30       	cpi	r24, 0x0D	; 13
    2af6:	e1 f7       	brne	.-8      	; 0x2af0 <ComparePassword+0x15e>
		UART_sendByte(CHeckPassword);
    2af8:	80 e1       	ldi	r24, 0x10	; 16
    2afa:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <UART_sendByte>
		for(uint8 j = 0 ; j < password_size	; j++)
    2afe:	1b a6       	std	Y+43, r1	; 0x2b
    2b00:	10 c0       	rjmp	.+32     	; 0x2b22 <ComparePassword+0x190>
		{
			UART_sendByte(password2[j]);
    2b02:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	fc 01       	movw	r30, r24
    2b0a:	ea 5b       	subi	r30, 0xBA	; 186
    2b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0e:	80 81       	ld	r24, Z
    2b10:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <UART_sendByte>
			while(UART_recieveByte() != Micro_is_ready);
    2b14:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <UART_recieveByte>
    2b18:	80 38       	cpi	r24, 0x80	; 128
    2b1a:	e1 f7       	brne	.-8      	; 0x2b14 <ComparePassword+0x182>
			}
			_delay_ms(500);
		}
		while(KEYPAD_getPressedKey() != 13){} /* wait tell the user press Enter key on the keypad */
		UART_sendByte(CHeckPassword);
		for(uint8 j = 0 ; j < password_size	; j++)
    2b1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b1e:	8f 5f       	subi	r24, 0xFF	; 255
    2b20:	8b a7       	std	Y+43, r24	; 0x2b
    2b22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b24:	85 30       	cpi	r24, 0x05	; 5
    2b26:	68 f3       	brcs	.-38     	; 0x2b02 <ComparePassword+0x170>
		{
			UART_sendByte(password2[j]);
			while(UART_recieveByte() != Micro_is_ready);
		}
		LCD_clearScreen();
    2b28:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <LCD_clearScreen>
		if(UART_recieveByte() == matched)
    2b2c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <UART_recieveByte>
    2b30:	81 38       	cpi	r24, 0x81	; 129
    2b32:	09 f0       	breq	.+2      	; 0x2b36 <ComparePassword+0x1a4>
    2b34:	7c c0       	rjmp	.+248    	; 0x2c2e <ComparePassword+0x29c>
		{
			LCD_displayStringRowColumn(0, 4, "Matched");
    2b36:	2d e8       	ldi	r18, 0x8D	; 141
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	64 e0       	ldi	r22, 0x04	; 4
    2b3e:	a9 01       	movw	r20, r18
    2b40:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	aa e7       	ldi	r26, 0x7A	; 122
    2b4a:	b4 e4       	ldi	r27, 0x44	; 68
    2b4c:	89 8f       	std	Y+25, r24	; 0x19
    2b4e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b50:	ab 8f       	std	Y+27, r26	; 0x1b
    2b52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b54:	69 8d       	ldd	r22, Y+25	; 0x19
    2b56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a ef       	ldi	r20, 0xFA	; 250
    2b62:	54 e4       	ldi	r21, 0x44	; 68
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	8d 8b       	std	Y+21, r24	; 0x15
    2b6e:	9e 8b       	std	Y+22, r25	; 0x16
    2b70:	af 8b       	std	Y+23, r26	; 0x17
    2b72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b74:	6d 89       	ldd	r22, Y+21	; 0x15
    2b76:	7e 89       	ldd	r23, Y+22	; 0x16
    2b78:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	2c f4       	brge	.+10     	; 0x2b96 <ComparePassword+0x204>
		__ticks = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9c 8b       	std	Y+20, r25	; 0x14
    2b92:	8b 8b       	std	Y+19, r24	; 0x13
    2b94:	3f c0       	rjmp	.+126    	; 0x2c14 <ComparePassword+0x282>
	else if (__tmp > 65535)
    2b96:	6d 89       	ldd	r22, Y+21	; 0x15
    2b98:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	4c f5       	brge	.+82     	; 0x2c00 <ComparePassword+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bae:	69 8d       	ldd	r22, Y+25	; 0x19
    2bb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e2       	ldi	r20, 0x20	; 32
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9c 8b       	std	Y+20, r25	; 0x14
    2bd4:	8b 8b       	std	Y+19, r24	; 0x13
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <ComparePassword+0x264>
    2bd8:	88 ec       	ldi	r24, 0xC8	; 200
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	9a 8b       	std	Y+18, r25	; 0x12
    2bde:	89 8b       	std	Y+17, r24	; 0x11
    2be0:	89 89       	ldd	r24, Y+17	; 0x11
    2be2:	9a 89       	ldd	r25, Y+18	; 0x12
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <ComparePassword+0x252>
    2be8:	9a 8b       	std	Y+18, r25	; 0x12
    2bea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	8b 89       	ldd	r24, Y+19	; 0x13
    2bee:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	9c 8b       	std	Y+20, r25	; 0x14
    2bf4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	69 f7       	brne	.-38     	; 0x2bd8 <ComparePassword+0x246>
    2bfe:	14 c0       	rjmp	.+40     	; 0x2c28 <ComparePassword+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c00:	6d 89       	ldd	r22, Y+21	; 0x15
    2c02:	7e 89       	ldd	r23, Y+22	; 0x16
    2c04:	8f 89       	ldd	r24, Y+23	; 0x17
    2c06:	98 8d       	ldd	r25, Y+24	; 0x18
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9c 8b       	std	Y+20, r25	; 0x14
    2c12:	8b 8b       	std	Y+19, r24	; 0x13
    2c14:	8b 89       	ldd	r24, Y+19	; 0x13
    2c16:	9c 89       	ldd	r25, Y+20	; 0x14
    2c18:	98 8b       	std	Y+16, r25	; 0x10
    2c1a:	8f 87       	std	Y+15, r24	; 0x0f
    2c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c1e:	98 89       	ldd	r25, Y+16	; 0x10
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <ComparePassword+0x28e>
    2c24:	98 8b       	std	Y+16, r25	; 0x10
    2c26:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			return matched;
    2c28:	81 e8       	ldi	r24, 0x81	; 129
    2c2a:	8e a7       	std	Y+46, r24	; 0x2e
    2c2c:	8f c0       	rjmp	.+286    	; 0x2d4c <ComparePassword+0x3ba>
		}
		else
		{
			tries--; /* decrease number of tries by 1 if the user missed */
    2c2e:	80 91 2b 01 	lds	r24, 0x012B
    2c32:	81 50       	subi	r24, 0x01	; 1
    2c34:	80 93 2b 01 	sts	0x012B, r24
			LCD_displayStringRowColumn(0, 3, "UnMatched");
    2c38:	26 ea       	ldi	r18, 0xA6	; 166
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	63 e0       	ldi	r22, 0x03	; 3
    2c40:	a9 01       	movw	r20, r18
    2c42:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Tries left = ");
    2c46:	2b eb       	ldi	r18, 0xBB	; 187
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	60 e0       	ldi	r22, 0x00	; 0
    2c4e:	a9 01       	movw	r20, r18
    2c50:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
			LCD_intgerToString(tries);
    2c54:	80 91 2b 01 	lds	r24, 0x012B
    2c58:	88 2f       	mov	r24, r24
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCD_intgerToString>
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	aa e7       	ldi	r26, 0x7A	; 122
    2c66:	b4 e4       	ldi	r27, 0x44	; 68
    2c68:	8b 87       	std	Y+11, r24	; 0x0b
    2c6a:	9c 87       	std	Y+12, r25	; 0x0c
    2c6c:	ad 87       	std	Y+13, r26	; 0x0d
    2c6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	4a ef       	ldi	r20, 0xFA	; 250
    2c7e:	54 e4       	ldi	r21, 0x44	; 68
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	8f 83       	std	Y+7, r24	; 0x07
    2c8a:	98 87       	std	Y+8, r25	; 0x08
    2c8c:	a9 87       	std	Y+9, r26	; 0x09
    2c8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c90:	6f 81       	ldd	r22, Y+7	; 0x07
    2c92:	78 85       	ldd	r23, Y+8	; 0x08
    2c94:	89 85       	ldd	r24, Y+9	; 0x09
    2c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e8       	ldi	r20, 0x80	; 128
    2c9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ca0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca4:	88 23       	and	r24, r24
    2ca6:	2c f4       	brge	.+10     	; 0x2cb2 <ComparePassword+0x320>
		__ticks = 1;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	9e 83       	std	Y+6, r25	; 0x06
    2cae:	8d 83       	std	Y+5, r24	; 0x05
    2cb0:	3f c0       	rjmp	.+126    	; 0x2d30 <ComparePassword+0x39e>
	else if (__tmp > 65535)
    2cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb4:	78 85       	ldd	r23, Y+8	; 0x08
    2cb6:	89 85       	ldd	r24, Y+9	; 0x09
    2cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	3f ef       	ldi	r19, 0xFF	; 255
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	57 e4       	ldi	r21, 0x47	; 71
    2cc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc6:	18 16       	cp	r1, r24
    2cc8:	4c f5       	brge	.+82     	; 0x2d1c <ComparePassword+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e2       	ldi	r20, 0x20	; 32
    2cd8:	51 e4       	ldi	r21, 0x41	; 65
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
    2cf2:	0f c0       	rjmp	.+30     	; 0x2d12 <ComparePassword+0x380>
    2cf4:	88 ec       	ldi	r24, 0xC8	; 200
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9c 83       	std	Y+4, r25	; 0x04
    2cfa:	8b 83       	std	Y+3, r24	; 0x03
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <ComparePassword+0x36e>
    2d04:	9c 83       	std	Y+4, r25	; 0x04
    2d06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	9e 83       	std	Y+6, r25	; 0x06
    2d10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d12:	8d 81       	ldd	r24, Y+5	; 0x05
    2d14:	9e 81       	ldd	r25, Y+6	; 0x06
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	69 f7       	brne	.-38     	; 0x2cf4 <ComparePassword+0x362>
    2d1a:	14 c0       	rjmp	.+40     	; 0x2d44 <ComparePassword+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1e:	78 85       	ldd	r23, Y+8	; 0x08
    2d20:	89 85       	ldd	r24, Y+9	; 0x09
    2d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	9e 83       	std	Y+6, r25	; 0x06
    2d2e:	8d 83       	std	Y+5, r24	; 0x05
    2d30:	8d 81       	ldd	r24, Y+5	; 0x05
    2d32:	9e 81       	ldd	r25, Y+6	; 0x06
    2d34:	9a 83       	std	Y+2, r25	; 0x02
    2d36:	89 83       	std	Y+1, r24	; 0x01
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <ComparePassword+0x3aa>
    2d40:	9a 83       	std	Y+2, r25	; 0x02
    2d42:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
		return unmatched;
    2d44:	82 e8       	ldi	r24, 0x82	; 130
    2d46:	8e a7       	std	Y+46, r24	; 0x2e
    2d48:	01 c0       	rjmp	.+2      	; 0x2d4c <ComparePassword+0x3ba>
    2d4a:	02 c0       	rjmp	.+4      	; 0x2d50 <ComparePassword+0x3be>

	}

}
    2d4c:	8e a5       	ldd	r24, Y+46	; 0x2e
    2d4e:	8f a7       	std	Y+47, r24	; 0x2f
    2d50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d52:	af 96       	adiw	r28, 0x2f	; 47
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <Alarm>:
void Alarm(void)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2d6c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 3, "Error");
    2d70:	29 ec       	ldi	r18, 0xC9	; 201
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	63 e0       	ldi	r22, 0x03	; 3
    2d78:	a9 01       	movw	r20, r18
    2d7a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
	UART_sendByte(TurnOnBuzzer);
    2d7e:	80 e5       	ldi	r24, 0x50	; 80
    2d80:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <UART_sendByte>
	ticks = 0;
    2d84:	10 92 3d 01 	sts	0x013D, r1
	AlarmFlag = 0;
    2d88:	10 92 3f 01 	sts	0x013F, r1
	Timer1_init(&TIMER1_Configuration);
    2d8c:	8c e2       	ldi	r24, 0x2C	; 44
    2d8e:	91 e0       	ldi	r25, 0x01	; 1
    2d90:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <Timer1_init>
	Timer1_comp_SetCallBack(Alarm_Timer);
    2d94:	80 e2       	ldi	r24, 0x20	; 32
    2d96:	97 e1       	ldi	r25, 0x17	; 23
    2d98:	0e 94 4d 0c 	call	0x189a	; 0x189a <Timer1_comp_SetCallBack>
	while(AlarmFlag == 0){}
    2d9c:	80 91 3f 01 	lds	r24, 0x013F
    2da0:	88 23       	and	r24, r24
    2da2:	e1 f3       	breq	.-8      	; 0x2d9c <Alarm+0x38>
}
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <OpenDoor>:

void OpenDoor(void)
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	0f 92       	push	r0
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
	uint8 compare =ComparePassword();
    2db4:	0e 94 c9 14 	call	0x2992	; 0x2992 <ComparePassword>
    2db8:	89 83       	std	Y+1, r24	; 0x01
	if(compare==matched)
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	81 38       	cpi	r24, 0x81	; 129
    2dbe:	09 f5       	brne	.+66     	; 0x2e02 <OpenDoor+0x58>
	{
		UART_sendByte(OPEN_DOOR);
    2dc0:	80 e9       	ldi	r24, 0x90	; 144
    2dc2:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <UART_sendByte>
		ticks = 0;
    2dc6:	10 92 3d 01 	sts	0x013D, r1
		Timer1_comp_SetCallBack(OpenDoorTimer); /* unlock the door takes 15 seconds */
    2dca:	80 e6       	ldi	r24, 0x60	; 96
    2dcc:	97 e1       	ldi	r25, 0x17	; 23
    2dce:	0e 94 4d 0c 	call	0x189a	; 0x189a <Timer1_comp_SetCallBack>
		Timer1_init(&TIMER1_Configuration);
    2dd2:	8c e2       	ldi	r24, 0x2C	; 44
    2dd4:	91 e0       	ldi	r25, 0x01	; 1
    2dd6:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <Timer1_init>
		LCD_displayStringRowColumn(0, 5, "The door");
    2dda:	2f ec       	ldi	r18, 0xCF	; 207
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	65 e0       	ldi	r22, 0x05	; 5
    2de2:	a9 01       	movw	r20, r18
    2de4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "is unlocking");
    2de8:	28 ed       	ldi	r18, 0xD8	; 216
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	a9 01       	movw	r20, r18
    2df2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
		MotorFlag = 0;
    2df6:	10 92 3e 01 	sts	0x013E, r1
		while(MotorFlag == 0){}
    2dfa:	80 91 3e 01 	lds	r24, 0x013E
    2dfe:	88 23       	and	r24, r24
    2e00:	e1 f3       	breq	.-8      	; 0x2dfa <OpenDoor+0x50>

	}
	if(compare==unmatched)
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	82 38       	cpi	r24, 0x82	; 130
    2e06:	11 f4       	brne	.+4      	; 0x2e0c <OpenDoor+0x62>
	{
		Alarm();
    2e08:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <Alarm>

	}

}
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <ChangePassword>:

void ChangePassword()
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	0f 92       	push	r0
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
	uint8 compare =ComparePassword();
    2e1e:	0e 94 c9 14 	call	0x2992	; 0x2992 <ComparePassword>
    2e22:	89 83       	std	Y+1, r24	; 0x01
	if(compare == matched)
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	81 38       	cpi	r24, 0x81	; 129
    2e28:	11 f4       	brne	.+4      	; 0x2e2e <ChangePassword+0x1a>
	{
		SetPassword(); /* set the new password */
    2e2a:	0e 94 2b 12 	call	0x2456	; 0x2456 <SetPassword>
	}
	if(compare == unmatched)
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	82 38       	cpi	r24, 0x82	; 130
    2e32:	11 f4       	brne	.+4      	; 0x2e38 <ChangePassword+0x24>
	{
		Alarm(); /* Turn on the alarm */
    2e34:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <Alarm>
	}

}
    2e38:	0f 90       	pop	r0
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <Alarm_Timer>:

void Alarm_Timer(void)
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    2e48:	80 91 3d 01 	lds	r24, 0x013D
    2e4c:	8f 5f       	subi	r24, 0xFF	; 255
    2e4e:	80 93 3d 01 	sts	0x013D, r24
	if(ticks==60)
    2e52:	80 91 3d 01 	lds	r24, 0x013D
    2e56:	8c 33       	cpi	r24, 0x3C	; 60
    2e58:	39 f4       	brne	.+14     	; 0x2e68 <Alarm_Timer+0x28>
	{
		Timer1_deInit();
    2e5a:	0e 94 26 0c 	call	0x184c	; 0x184c <Timer1_deInit>
		ticks=0;
    2e5e:	10 92 3d 01 	sts	0x013D, r1
		AlarmFlag=1;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	80 93 3f 01 	sts	0x013F, r24
	}
}
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	08 95       	ret

00002e6e <WaitTimer>:


void WaitTimer(void)
{
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    2e76:	80 91 3d 01 	lds	r24, 0x013D
    2e7a:	8f 5f       	subi	r24, 0xFF	; 255
    2e7c:	80 93 3d 01 	sts	0x013D, r24
	if(ticks == 3)
    2e80:	80 91 3d 01 	lds	r24, 0x013D
    2e84:	83 30       	cpi	r24, 0x03	; 3
    2e86:	c9 f4       	brne	.+50     	; 0x2eba <WaitTimer+0x4c>
	{
		ticks = 0;
    2e88:	10 92 3d 01 	sts	0x013D, r1
		LCD_clearScreen();
    2e8c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,4, "Locking");
    2e90:	25 ee       	ldi	r18, 0xE5	; 229
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	64 e0       	ldi	r22, 0x04	; 4
    2e98:	a9 01       	movw	r20, r18
    2e9a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,4, "The Door");
    2e9e:	2d ee       	ldi	r18, 0xED	; 237
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	64 e0       	ldi	r22, 0x04	; 4
    2ea6:	a9 01       	movw	r20, r18
    2ea8:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
		UART_sendByte(Micro_is_ready);
    2eac:	80 e8       	ldi	r24, 0x80	; 128
    2eae:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <UART_sendByte>
		Timer1_comp_SetCallBack(OpenDoorTimer);
    2eb2:	80 e6       	ldi	r24, 0x60	; 96
    2eb4:	97 e1       	ldi	r25, 0x17	; 23
    2eb6:	0e 94 4d 0c 	call	0x189a	; 0x189a <Timer1_comp_SetCallBack>
	}
}
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <OpenDoorTimer>:


void OpenDoorTimer(void)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    2ec8:	80 91 3d 01 	lds	r24, 0x013D
    2ecc:	8f 5f       	subi	r24, 0xFF	; 255
    2ece:	80 93 3d 01 	sts	0x013D, r24
	if(ticks == 15)
    2ed2:	80 91 3d 01 	lds	r24, 0x013D
    2ed6:	8f 30       	cpi	r24, 0x0F	; 15
    2ed8:	39 f5       	brne	.+78     	; 0x2f28 <OpenDoorTimer+0x68>
	{
		ticks = 0;
    2eda:	10 92 3d 01 	sts	0x013D, r1
		LCD_clearScreen();
    2ede:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <LCD_clearScreen>
		if(StartMotor == 0)
    2ee2:	80 91 40 01 	lds	r24, 0x0140
    2ee6:	88 23       	and	r24, r24
    2ee8:	a1 f4       	brne	.+40     	; 0x2f12 <OpenDoorTimer+0x52>
		{
			LCD_displayStringRowColumn(0, 0, "Door Is Locked");
    2eea:	26 ef       	ldi	r18, 0xF6	; 246
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	60 e0       	ldi	r22, 0x00	; 0
    2ef2:	a9 01       	movw	r20, r18
    2ef4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
			UART_sendByte(Micro_is_ready);
    2ef8:	80 e8       	ldi	r24, 0x80	; 128
    2efa:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <UART_sendByte>
			StartMotor++;
    2efe:	80 91 40 01 	lds	r24, 0x0140
    2f02:	8f 5f       	subi	r24, 0xFF	; 255
    2f04:	80 93 40 01 	sts	0x0140, r24
			Timer1_comp_SetCallBack(WaitTimer);
    2f08:	87 e3       	ldi	r24, 0x37	; 55
    2f0a:	97 e1       	ldi	r25, 0x17	; 23
    2f0c:	0e 94 4d 0c 	call	0x189a	; 0x189a <Timer1_comp_SetCallBack>
    2f10:	0b c0       	rjmp	.+22     	; 0x2f28 <OpenDoorTimer+0x68>
		}
		else if(StartMotor == 1)
    2f12:	80 91 40 01 	lds	r24, 0x0140
    2f16:	81 30       	cpi	r24, 0x01	; 1
    2f18:	39 f4       	brne	.+14     	; 0x2f28 <OpenDoorTimer+0x68>
		{
			StartMotor = 0;
    2f1a:	10 92 40 01 	sts	0x0140, r1
			MotorFlag = 1;
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	80 93 3e 01 	sts	0x013E, r24
			Timer1_deInit();
    2f24:	0e 94 26 0c 	call	0x184c	; 0x184c <Timer1_deInit>
		}
	}
}
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <MainOption>:

uint8 MainOption(void)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <MainOption+0x6>
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
	uint8 key = 0;
    2f38:	19 82       	std	Y+1, r1	; 0x01
	/* Displays the main options on LCD */
	LCD_clearScreen();
    2f3a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    2f3e:	85 e0       	ldi	r24, 0x05	; 5
    2f40:	91 e0       	ldi	r25, 0x01	; 1
    2f42:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    2f46:	23 e1       	ldi	r18, 0x13	; 19
    2f48:	31 e0       	ldi	r19, 0x01	; 1
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	a9 01       	movw	r20, r18
    2f50:	0e 94 9c 0b 	call	0x1738	; 0x1738 <LCD_displayStringRowColumn>
    2f54:	0f c0       	rjmp	.+30     	; 0x2f74 <MainOption+0x46>
	/* Keeps waiting until an available key is pressed */
	while(key != '+' || key!= '-')
	{
		/* Waits until keypad is pressed and save option in key variable*/
		key = KEYPAD_getPressedKey();
    2f56:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2f5a:	89 83       	std	Y+1, r24	; 0x01
		/* Send key to Control ECU if only available option is pressed*/
		if(key == '+' || key == '-')
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	8b 32       	cpi	r24, 0x2B	; 43
    2f60:	19 f0       	breq	.+6      	; 0x2f68 <MainOption+0x3a>
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	8d 32       	cpi	r24, 0x2D	; 45
    2f66:	31 f4       	brne	.+12     	; 0x2f74 <MainOption+0x46>
		{
			UART_sendByte(key);
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <UART_sendByte>
			return key;
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	8a 83       	std	Y+2, r24	; 0x02
    2f72:	08 c0       	rjmp	.+16     	; 0x2f84 <MainOption+0x56>
	/* Displays the main options on LCD */
	LCD_clearScreen();
	LCD_displayString("+ : Open Door");
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
	/* Keeps waiting until an available key is pressed */
	while(key != '+' || key!= '-')
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	8b 32       	cpi	r24, 0x2B	; 43
    2f78:	71 f7       	brne	.-36     	; 0x2f56 <MainOption+0x28>
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	8d 32       	cpi	r24, 0x2D	; 45
    2f7e:	59 f7       	brne	.-42     	; 0x2f56 <MainOption+0x28>
		{
			UART_sendByte(key);
			return key;
		}
	}
	return key;
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	8a 83       	std	Y+2, r24	; 0x02
    2f84:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	cf 91       	pop	r28
    2f8c:	df 91       	pop	r29
    2f8e:	08 95       	ret

00002f90 <__udivmodsi4>:
    2f90:	a1 e2       	ldi	r26, 0x21	; 33
    2f92:	1a 2e       	mov	r1, r26
    2f94:	aa 1b       	sub	r26, r26
    2f96:	bb 1b       	sub	r27, r27
    2f98:	fd 01       	movw	r30, r26
    2f9a:	0d c0       	rjmp	.+26     	; 0x2fb6 <__udivmodsi4_ep>

00002f9c <__udivmodsi4_loop>:
    2f9c:	aa 1f       	adc	r26, r26
    2f9e:	bb 1f       	adc	r27, r27
    2fa0:	ee 1f       	adc	r30, r30
    2fa2:	ff 1f       	adc	r31, r31
    2fa4:	a2 17       	cp	r26, r18
    2fa6:	b3 07       	cpc	r27, r19
    2fa8:	e4 07       	cpc	r30, r20
    2faa:	f5 07       	cpc	r31, r21
    2fac:	20 f0       	brcs	.+8      	; 0x2fb6 <__udivmodsi4_ep>
    2fae:	a2 1b       	sub	r26, r18
    2fb0:	b3 0b       	sbc	r27, r19
    2fb2:	e4 0b       	sbc	r30, r20
    2fb4:	f5 0b       	sbc	r31, r21

00002fb6 <__udivmodsi4_ep>:
    2fb6:	66 1f       	adc	r22, r22
    2fb8:	77 1f       	adc	r23, r23
    2fba:	88 1f       	adc	r24, r24
    2fbc:	99 1f       	adc	r25, r25
    2fbe:	1a 94       	dec	r1
    2fc0:	69 f7       	brne	.-38     	; 0x2f9c <__udivmodsi4_loop>
    2fc2:	60 95       	com	r22
    2fc4:	70 95       	com	r23
    2fc6:	80 95       	com	r24
    2fc8:	90 95       	com	r25
    2fca:	9b 01       	movw	r18, r22
    2fcc:	ac 01       	movw	r20, r24
    2fce:	bd 01       	movw	r22, r26
    2fd0:	cf 01       	movw	r24, r30
    2fd2:	08 95       	ret

00002fd4 <__prologue_saves__>:
    2fd4:	2f 92       	push	r2
    2fd6:	3f 92       	push	r3
    2fd8:	4f 92       	push	r4
    2fda:	5f 92       	push	r5
    2fdc:	6f 92       	push	r6
    2fde:	7f 92       	push	r7
    2fe0:	8f 92       	push	r8
    2fe2:	9f 92       	push	r9
    2fe4:	af 92       	push	r10
    2fe6:	bf 92       	push	r11
    2fe8:	cf 92       	push	r12
    2fea:	df 92       	push	r13
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	ca 1b       	sub	r28, r26
    2ffe:	db 0b       	sbc	r29, r27
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
    300a:	09 94       	ijmp

0000300c <__epilogue_restores__>:
    300c:	2a 88       	ldd	r2, Y+18	; 0x12
    300e:	39 88       	ldd	r3, Y+17	; 0x11
    3010:	48 88       	ldd	r4, Y+16	; 0x10
    3012:	5f 84       	ldd	r5, Y+15	; 0x0f
    3014:	6e 84       	ldd	r6, Y+14	; 0x0e
    3016:	7d 84       	ldd	r7, Y+13	; 0x0d
    3018:	8c 84       	ldd	r8, Y+12	; 0x0c
    301a:	9b 84       	ldd	r9, Y+11	; 0x0b
    301c:	aa 84       	ldd	r10, Y+10	; 0x0a
    301e:	b9 84       	ldd	r11, Y+9	; 0x09
    3020:	c8 84       	ldd	r12, Y+8	; 0x08
    3022:	df 80       	ldd	r13, Y+7	; 0x07
    3024:	ee 80       	ldd	r14, Y+6	; 0x06
    3026:	fd 80       	ldd	r15, Y+5	; 0x05
    3028:	0c 81       	ldd	r16, Y+4	; 0x04
    302a:	1b 81       	ldd	r17, Y+3	; 0x03
    302c:	aa 81       	ldd	r26, Y+2	; 0x02
    302e:	b9 81       	ldd	r27, Y+1	; 0x01
    3030:	ce 0f       	add	r28, r30
    3032:	d1 1d       	adc	r29, r1
    3034:	0f b6       	in	r0, 0x3f	; 63
    3036:	f8 94       	cli
    3038:	de bf       	out	0x3e, r29	; 62
    303a:	0f be       	out	0x3f, r0	; 63
    303c:	cd bf       	out	0x3d, r28	; 61
    303e:	ed 01       	movw	r28, r26
    3040:	08 95       	ret

00003042 <itoa>:
    3042:	fb 01       	movw	r30, r22
    3044:	9f 01       	movw	r18, r30
    3046:	e8 94       	clt
    3048:	42 30       	cpi	r20, 0x02	; 2
    304a:	c4 f0       	brlt	.+48     	; 0x307c <itoa+0x3a>
    304c:	45 32       	cpi	r20, 0x25	; 37
    304e:	b4 f4       	brge	.+44     	; 0x307c <itoa+0x3a>
    3050:	4a 30       	cpi	r20, 0x0A	; 10
    3052:	29 f4       	brne	.+10     	; 0x305e <itoa+0x1c>
    3054:	97 fb       	bst	r25, 7
    3056:	1e f4       	brtc	.+6      	; 0x305e <itoa+0x1c>
    3058:	90 95       	com	r25
    305a:	81 95       	neg	r24
    305c:	9f 4f       	sbci	r25, 0xFF	; 255
    305e:	64 2f       	mov	r22, r20
    3060:	77 27       	eor	r23, r23
    3062:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__udivmodhi4>
    3066:	80 5d       	subi	r24, 0xD0	; 208
    3068:	8a 33       	cpi	r24, 0x3A	; 58
    306a:	0c f0       	brlt	.+2      	; 0x306e <itoa+0x2c>
    306c:	89 5d       	subi	r24, 0xD9	; 217
    306e:	81 93       	st	Z+, r24
    3070:	cb 01       	movw	r24, r22
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	a1 f7       	brne	.-24     	; 0x305e <itoa+0x1c>
    3076:	16 f4       	brtc	.+4      	; 0x307c <itoa+0x3a>
    3078:	5d e2       	ldi	r21, 0x2D	; 45
    307a:	51 93       	st	Z+, r21
    307c:	10 82       	st	Z, r1
    307e:	c9 01       	movw	r24, r18
    3080:	0c 94 42 18 	jmp	0x3084	; 0x3084 <strrev>

00003084 <strrev>:
    3084:	dc 01       	movw	r26, r24
    3086:	fc 01       	movw	r30, r24
    3088:	67 2f       	mov	r22, r23
    308a:	71 91       	ld	r23, Z+
    308c:	77 23       	and	r23, r23
    308e:	e1 f7       	brne	.-8      	; 0x3088 <strrev+0x4>
    3090:	32 97       	sbiw	r30, 0x02	; 2
    3092:	04 c0       	rjmp	.+8      	; 0x309c <strrev+0x18>
    3094:	7c 91       	ld	r23, X
    3096:	6d 93       	st	X+, r22
    3098:	70 83       	st	Z, r23
    309a:	62 91       	ld	r22, -Z
    309c:	ae 17       	cp	r26, r30
    309e:	bf 07       	cpc	r27, r31
    30a0:	c8 f3       	brcs	.-14     	; 0x3094 <strrev+0x10>
    30a2:	08 95       	ret

000030a4 <__udivmodhi4>:
    30a4:	aa 1b       	sub	r26, r26
    30a6:	bb 1b       	sub	r27, r27
    30a8:	51 e1       	ldi	r21, 0x11	; 17
    30aa:	07 c0       	rjmp	.+14     	; 0x30ba <__udivmodhi4_ep>

000030ac <__udivmodhi4_loop>:
    30ac:	aa 1f       	adc	r26, r26
    30ae:	bb 1f       	adc	r27, r27
    30b0:	a6 17       	cp	r26, r22
    30b2:	b7 07       	cpc	r27, r23
    30b4:	10 f0       	brcs	.+4      	; 0x30ba <__udivmodhi4_ep>
    30b6:	a6 1b       	sub	r26, r22
    30b8:	b7 0b       	sbc	r27, r23

000030ba <__udivmodhi4_ep>:
    30ba:	88 1f       	adc	r24, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	5a 95       	dec	r21
    30c0:	a9 f7       	brne	.-22     	; 0x30ac <__udivmodhi4_loop>
    30c2:	80 95       	com	r24
    30c4:	90 95       	com	r25
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	08 95       	ret

000030cc <_exit>:
    30cc:	f8 94       	cli

000030ce <__stop_program>:
    30ce:	ff cf       	rjmp	.-2      	; 0x30ce <__stop_program>
